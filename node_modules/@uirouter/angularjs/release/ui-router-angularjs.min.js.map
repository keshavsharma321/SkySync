{
  "version": 3,
  "file": "ui-router-angularjs.min.js",
  "sources": [
    "@uirouter\\angularjs\\src\\angular.ts",
    "@uirouter\\angularjs\\src\\statebuilders\\views.ts",
    "@uirouter\\angularjs\\src\\templateFactory.ts",
    "@uirouter\\angularjs\\src\\stateProvider.ts",
    "@uirouter\\angularjs\\src\\statebuilders\\onEnterExitRetain.ts",
    "@uirouter\\angularjs\\src\\locationServices.ts",
    "@uirouter\\angularjs\\src\\urlRouterProvider.ts",
    "@uirouter\\angularjs\\src\\services.ts",
    "@uirouter\\angularjs\\src\\directives\\stateDirectives.ts",
    "@uirouter\\angularjs\\src\\directives\\viewDirective.ts",
    "@uirouter\\angularjs\\src\\stateFilters.ts",
    "@uirouter\\angularjs\\src\\viewScroll.ts",
    "@uirouter\\angularjs\\src\\index.ts"
  ],
  "sourcesContent": [
    "/** @publicapi @module ng1 */ /** */\r\nimport * as ng_from_import from 'angular';\r\n/** @hidden */ declare let angular;\r\n/** @hidden */ const ng_from_global = angular;\r\n/** @hidden */ export const ng = ng_from_import && ng_from_import.module ? ng_from_import : ng_from_global;\r\n",
    "/** @publicapi @module ng1 */ /** */\r\nimport {\r\n  StateObject,\r\n  pick,\r\n  forEach,\r\n  tail,\r\n  extend,\r\n  isArray,\r\n  isInjectable,\r\n  isDefined,\r\n  isString,\r\n  services,\r\n  trace,\r\n  ViewConfig,\r\n  ViewService,\r\n  ViewConfigFactory,\r\n  PathNode,\r\n  ResolveContext,\r\n  Resolvable,\r\n  IInjectable,\r\n} from '@uirouter/core';\r\nimport { Ng1ViewDeclaration } from '../interface';\r\nimport { TemplateFactory } from '../templateFactory';\r\n\r\n/** @internalapi */\r\nexport function getNg1ViewConfigFactory(): ViewConfigFactory {\r\n  let templateFactory: TemplateFactory = null;\r\n  return (path, view) => {\r\n    templateFactory = templateFactory || services.$injector.get('$templateFactory');\r\n    return [new Ng1ViewConfig(path, view, templateFactory)];\r\n  };\r\n}\r\n\r\n/** @internalapi */\r\nconst hasAnyKey = (keys, obj) => keys.reduce((acc, key) => acc || isDefined(obj[key]), false);\r\n\r\n/**\r\n * This is a [[StateBuilder.builder]] function for angular1 `views`.\r\n *\r\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\r\n * handles the `views` property with logic specific to @uirouter/angularjs (ng1).\r\n *\r\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\r\n * and applies the state-level configuration to a view named `$default`.\r\n *\r\n * @internalapi\r\n */\r\nexport function ng1ViewsBuilder(state: StateObject) {\r\n  // Do not process root state\r\n  if (!state.parent) return {};\r\n\r\n  const tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'],\r\n    ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'],\r\n    compKeys = ['component', 'bindings', 'componentProvider'],\r\n    nonCompKeys = tplKeys.concat(ctrlKeys),\r\n    allViewKeys = compKeys.concat(nonCompKeys);\r\n\r\n  // Do not allow a state to have both state-level props and also a `views: {}` property.\r\n  // A state without a `views: {}` property can declare properties for the `$default` view as properties of the state.\r\n  // However, the `$default` approach should not be mixed with a separate `views: ` block.\r\n  if (isDefined(state.views) && hasAnyKey(allViewKeys, state)) {\r\n    throw new Error(\r\n      `State '${state.name}' has a 'views' object. ` +\r\n        `It cannot also have \"view properties\" at the state level.  ` +\r\n        `Move the following properties into a view (in the 'views' object): ` +\r\n        ` ${allViewKeys.filter((key) => isDefined(state[key])).join(', ')}`\r\n    );\r\n  }\r\n\r\n  const views: { [key: string]: Ng1ViewDeclaration } = {},\r\n    viewsObject = state.views || { $default: pick(state, allViewKeys) };\r\n\r\n  forEach(viewsObject, function (config: Ng1ViewDeclaration, name: string) {\r\n    // Account for views: { \"\": { template... } }\r\n    name = name || '$default';\r\n    // Account for views: { header: \"headerComponent\" }\r\n    if (isString(config)) config = { component: <string>config };\r\n\r\n    // Make a shallow copy of the config object\r\n    config = extend({}, config);\r\n\r\n    // Do not allow a view to mix props for component-style view with props for template/controller-style view\r\n    if (hasAnyKey(compKeys, config) && hasAnyKey(nonCompKeys, config)) {\r\n      throw new Error(\r\n        `Cannot combine: ${compKeys.join('|')} with: ${nonCompKeys.join('|')} in stateview: '${name}@${state.name}'`\r\n      );\r\n    }\r\n\r\n    config.resolveAs = config.resolveAs || '$resolve';\r\n    config.$type = 'ng1';\r\n    config.$context = state;\r\n    config.$name = name;\r\n\r\n    const normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\r\n    config.$uiViewName = normalized.uiViewName;\r\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\r\n\r\n    views[name] = config;\r\n  });\r\n  return views;\r\n}\r\n\r\n/** @hidden */\r\nlet id = 0;\r\n\r\n/** @internalapi */\r\nexport class Ng1ViewConfig implements ViewConfig {\r\n  $id = id++;\r\n  loaded = false;\r\n  controller: Function; // actually IInjectable|string\r\n  template: string;\r\n  component: string;\r\n  locals: any; // TODO: delete me\r\n\r\n  constructor(public path: PathNode[], public viewDecl: Ng1ViewDeclaration, public factory: TemplateFactory) {}\r\n\r\n  load() {\r\n    const $q = services.$q;\r\n    const context = new ResolveContext(this.path);\r\n    const params = this.path.reduce((acc, node) => extend(acc, node.paramValues), {});\r\n\r\n    const promises: any = {\r\n      template: $q.when(this.factory.fromConfig(this.viewDecl, params, context)),\r\n      controller: $q.when(this.getController(context)),\r\n    };\r\n\r\n    return $q.all(promises).then((results) => {\r\n      trace.traceViewServiceEvent('Loaded', this);\r\n      this.controller = results.controller;\r\n      extend(this, results.template); // Either { template: \"tpl\" } or { component: \"cmpName\" }\r\n      return this;\r\n    });\r\n  }\r\n\r\n  getTemplate = (uiView, context: ResolveContext) =>\r\n    this.component\r\n      ? this.factory.makeComponentTemplate(uiView, context, this.component, this.viewDecl.bindings)\r\n      : this.template;\r\n\r\n  /**\r\n   * Gets the controller for a view configuration.\r\n   *\r\n   * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\r\n   */\r\n  getController(context: ResolveContext): IInjectable | string | Promise<IInjectable | string> {\r\n    const provider = this.viewDecl.controllerProvider;\r\n    if (!isInjectable(provider)) return this.viewDecl.controller;\r\n    const deps = services.$injector.annotate(provider);\r\n    const providerFn = isArray(provider) ? tail(<any>provider) : provider;\r\n    const resolvable = new Resolvable('', <any>providerFn, deps);\r\n    return resolvable.get(context);\r\n  }\r\n}\r\n",
    "/** @publicapi @module view */ /** */\r\nimport { ng as angular } from './angular';\r\nimport { IAugmentedJQuery } from 'angular';\r\nimport {\r\n  isArray,\r\n  isDefined,\r\n  isFunction,\r\n  isObject,\r\n  services,\r\n  Obj,\r\n  IInjectable,\r\n  tail,\r\n  kebobString,\r\n  unnestR,\r\n  ResolveContext,\r\n  Resolvable,\r\n  RawParams,\r\n} from '@uirouter/core';\r\nimport { Ng1ViewDeclaration, TemplateFactoryProvider } from './interface';\r\n\r\n/**\r\n * Service which manages loading of templates from a ViewConfig.\r\n */\r\nexport class TemplateFactory implements TemplateFactoryProvider {\r\n  /** @hidden */ private _useHttp = angular.version.minor < 3;\r\n  /** @hidden */ private $templateRequest;\r\n  /** @hidden */ private $templateCache;\r\n  /** @hidden */ private $http;\r\n\r\n  /** @hidden */ $get = [\r\n    '$http',\r\n    '$templateCache',\r\n    '$injector',\r\n    ($http, $templateCache, $injector) => {\r\n      this.$templateRequest = $injector.has && $injector.has('$templateRequest') && $injector.get('$templateRequest');\r\n      this.$http = $http;\r\n      this.$templateCache = $templateCache;\r\n      return this;\r\n    },\r\n  ];\r\n\r\n  /** @hidden */\r\n  useHttpService(value: boolean) {\r\n    this._useHttp = value;\r\n  }\r\n\r\n  /**\r\n   * Creates a template from a configuration object.\r\n   *\r\n   * @param config Configuration object for which to load a template.\r\n   * The following properties are search in the specified order, and the first one\r\n   * that is defined is used to create the template:\r\n   *\r\n   * @param params  Parameters to pass to the template function.\r\n   * @param context The resolve context associated with the template's view\r\n   *\r\n   * @return {string|object}  The template html as a string, or a promise for\r\n   * that string,or `null` if no template is configured.\r\n   */\r\n  fromConfig(\r\n    config: Ng1ViewDeclaration,\r\n    params: any,\r\n    context: ResolveContext\r\n  ): Promise<{ template?: string; component?: string }> {\r\n    const defaultTemplate = '<ui-view></ui-view>';\r\n\r\n    const asTemplate = (result) => services.$q.when(result).then((str) => ({ template: str }));\r\n    const asComponent = (result) => services.$q.when(result).then((str) => ({ component: str }));\r\n\r\n    return isDefined(config.template)\r\n      ? asTemplate(this.fromString(config.template, params))\r\n      : isDefined(config.templateUrl)\r\n      ? asTemplate(this.fromUrl(config.templateUrl, params))\r\n      : isDefined(config.templateProvider)\r\n      ? asTemplate(this.fromProvider(config.templateProvider, params, context))\r\n      : isDefined(config.component)\r\n      ? asComponent(config.component)\r\n      : isDefined(config.componentProvider)\r\n      ? asComponent(this.fromComponentProvider(config.componentProvider, params, context))\r\n      : asTemplate(defaultTemplate);\r\n  }\r\n\r\n  /**\r\n   * Creates a template from a string or a function returning a string.\r\n   *\r\n   * @param template html template as a string or function that returns an html template as a string.\r\n   * @param params Parameters to pass to the template function.\r\n   *\r\n   * @return {string|object} The template html as a string, or a promise for that\r\n   * string.\r\n   */\r\n  fromString(template: string | Function, params?: RawParams) {\r\n    return isFunction(template) ? (<any>template)(params) : template;\r\n  }\r\n\r\n  /**\r\n   * Loads a template from the a URL via `$http` and `$templateCache`.\r\n   *\r\n   * @param {string|Function} url url of the template to load, or a function\r\n   * that returns a url.\r\n   * @param {Object} params Parameters to pass to the url function.\r\n   * @return {string|Promise.<string>} The template html as a string, or a promise\r\n   * for that string.\r\n   */\r\n  fromUrl(url: string | Function, params: any) {\r\n    if (isFunction(url)) url = (<any>url)(params);\r\n    if (url == null) return null;\r\n\r\n    if (this._useHttp) {\r\n      return this.$http\r\n        .get(url, { cache: this.$templateCache, headers: { Accept: 'text/html' } })\r\n        .then(function (response) {\r\n          return response.data;\r\n        });\r\n    }\r\n\r\n    return this.$templateRequest(url);\r\n  }\r\n\r\n  /**\r\n   * Creates a template by invoking an injectable provider function.\r\n   *\r\n   * @param provider Function to invoke via `locals`\r\n   * @param {Function} injectFn a function used to invoke the template provider\r\n   * @return {string|Promise.<string>} The template html as a string, or a promise\r\n   * for that string.\r\n   */\r\n  fromProvider(provider: IInjectable, params: any, context: ResolveContext) {\r\n    const deps = services.$injector.annotate(provider);\r\n    const providerFn = isArray(provider) ? tail(<any[]>provider) : provider;\r\n    const resolvable = new Resolvable('', <Function>providerFn, deps);\r\n    return resolvable.get(context);\r\n  }\r\n\r\n  /**\r\n   * Creates a component's template by invoking an injectable provider function.\r\n   *\r\n   * @param provider Function to invoke via `locals`\r\n   * @param {Function} injectFn a function used to invoke the template provider\r\n   * @return {string} The template html as a string: \"<component-name input1='::$resolve.foo'></component-name>\".\r\n   */\r\n  fromComponentProvider(provider: IInjectable, params: any, context: ResolveContext) {\r\n    const deps = services.$injector.annotate(provider);\r\n    const providerFn = isArray(provider) ? tail(<any[]>provider) : provider;\r\n    const resolvable = new Resolvable('', <Function>providerFn, deps);\r\n    return resolvable.get(context);\r\n  }\r\n\r\n  /**\r\n   * Creates a template from a component's name\r\n   *\r\n   * This implements route-to-component.\r\n   * It works by retrieving the component (directive) metadata from the injector.\r\n   * It analyses the component's bindings, then constructs a template that instantiates the component.\r\n   * The template wires input and output bindings to resolves or from the parent component.\r\n   *\r\n   * @param uiView {object} The parent ui-view (for binding outputs to callbacks)\r\n   * @param context The ResolveContext (for binding outputs to callbacks returned from resolves)\r\n   * @param component {string} Component's name in camel case.\r\n   * @param bindings An object defining the component's bindings: {foo: '<'}\r\n   * @return {string} The template as a string: \"<component-name input1='::$resolve.foo'></component-name>\".\r\n   */\r\n  makeComponentTemplate(uiView: IAugmentedJQuery, context: ResolveContext, component: string, bindings?: any) {\r\n    bindings = bindings || {};\r\n\r\n    // Bind once prefix\r\n    const prefix = angular.version.minor >= 3 ? '::' : '';\r\n    // Convert to kebob name. Add x- prefix if the string starts with `x-` or `data-`\r\n    const kebob = (camelCase: string) => {\r\n      const kebobed = kebobString(camelCase);\r\n      return /^(x|data)-/.exec(kebobed) ? `x-${kebobed}` : kebobed;\r\n    };\r\n\r\n    const attributeTpl = (input: BindingTuple) => {\r\n      const { name, type } = input;\r\n      const attrName = kebob(name);\r\n      // If the ui-view has an attribute which matches a binding on the routed component\r\n      // then pass that attribute through to the routed component template.\r\n      // Prefer ui-view wired mappings to resolve data, unless the resolve was explicitly bound using `bindings:`\r\n      if (uiView.attr(attrName) && !bindings[name]) return `${attrName}='${uiView.attr(attrName)}'`;\r\n\r\n      const resolveName = bindings[name] || name;\r\n      // Pre-evaluate the expression for \"@\" bindings by enclosing in {{ }}\r\n      // some-attr=\"{{ ::$resolve.someResolveName }}\"\r\n      if (type === '@') return `${attrName}='{{${prefix}$resolve.${resolveName}}}'`;\r\n\r\n      // Wire \"&\" callbacks to resolves that return a callback function\r\n      // Get the result of the resolve (should be a function) and annotate it to get its arguments.\r\n      // some-attr=\"$resolve.someResolveResultName(foo, bar)\"\r\n      if (type === '&') {\r\n        const res = context.getResolvable(resolveName);\r\n        const fn = res && res.data;\r\n        const args = (fn && services.$injector.annotate(fn)) || [];\r\n        // account for array style injection, i.e., ['foo', function(foo) {}]\r\n        const arrayIdxStr = isArray(fn) ? `[${fn.length - 1}]` : '';\r\n        return `${attrName}='$resolve.${resolveName}${arrayIdxStr}(${args.join(',')})'`;\r\n      }\r\n\r\n      // some-attr=\"::$resolve.someResolveName\"\r\n      return `${attrName}='${prefix}$resolve.${resolveName}'`;\r\n    };\r\n\r\n    const attrs = getComponentBindings(component).map(attributeTpl).join(' ');\r\n    const kebobName = kebob(component);\r\n    return `<${kebobName} ${attrs}></${kebobName}>`;\r\n  }\r\n}\r\n\r\n// Gets all the directive(s)' inputs ('@', '=', and '<') and outputs ('&')\r\nfunction getComponentBindings(name: string) {\r\n  const cmpDefs = <any[]>services.$injector.get(name + 'Directive'); // could be multiple\r\n  if (!cmpDefs || !cmpDefs.length) throw new Error(`Unable to find component named '${name}'`);\r\n  return cmpDefs.map(getBindings).reduce(unnestR, []);\r\n}\r\n\r\n// Given a directive definition, find its object input attributes\r\n// Use different properties, depending on the type of directive (component, bindToController, normal)\r\nconst getBindings = (def: any) => {\r\n  if (isObject(def.bindToController)) return scopeBindings(def.bindToController);\r\n  return scopeBindings(def.scope);\r\n};\r\n\r\ninterface BindingTuple {\r\n  name: string;\r\n  type: string;\r\n}\r\n\r\n// for ng 1.2 style, process the scope: { input: \"=foo\" }\r\n// for ng 1.3 through ng 1.5, process the component's bindToController: { input: \"=foo\" } object\r\nconst scopeBindings = (bindingsObj: Obj) =>\r\n  Object.keys(bindingsObj || {})\r\n    // [ 'input', [ '=foo', '=', 'foo' ] ]\r\n    .map((key) => [key, /^([=<@&])[?]?(.*)/.exec(bindingsObj[key])])\r\n    // skip malformed values\r\n    .filter((tuple) => isDefined(tuple) && isArray(tuple[1]))\r\n    // { name: ('foo' || 'input'), type: '=' }\r\n    .map((tuple) => ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] } as BindingTuple));\r\n",
    "/** @publicapi @module ng1 */ /** */\r\nimport {\r\n  val,\r\n  isObject,\r\n  createProxyFunctions,\r\n  BuilderFunction,\r\n  StateRegistry,\r\n  StateService,\r\n  OnInvalidCallback,\r\n} from '@uirouter/core';\r\nimport { Ng1StateDeclaration } from './interface';\r\n\r\n/**\r\n * The Angular 1 `StateProvider`\r\n *\r\n * The `$stateProvider` works similar to Angular's v1 router, but it focuses purely\r\n * on state.\r\n *\r\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\r\n * navigation. A state describes (via the controller / template / view properties) what\r\n * the UI looks like and does at that place.\r\n *\r\n * States often have things in common, and the primary way of factoring out these\r\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\r\n * nested states.\r\n *\r\n * The `$stateProvider` provides interfaces to declare these states for your app.\r\n */\r\nexport class StateProvider {\r\n  constructor(private stateRegistry: StateRegistry, private stateService: StateService) {\r\n    createProxyFunctions(val(StateProvider.prototype), this, val(this));\r\n  }\r\n\r\n  /**\r\n   * Decorates states when they are registered\r\n   *\r\n   * Allows you to extend (carefully) or override (at your own peril) the\r\n   * `stateBuilder` object used internally by [[StateRegistry]].\r\n   * This can be used to add custom functionality to ui-router,\r\n   * for example inferring templateUrl based on the state name.\r\n   *\r\n   * When passing only a name, it returns the current (original or decorated) builder\r\n   * function that matches `name`.\r\n   *\r\n   * The builder functions that can be decorated are listed below. Though not all\r\n   * necessarily have a good use case for decoration, that is up to you to decide.\r\n   *\r\n   * In addition, users can attach custom decorators, which will generate new\r\n   * properties within the state's internal definition. There is currently no clear\r\n   * use-case for this beyond accessing internal states (i.e. $state.$current),\r\n   * however, expect this to become increasingly relevant as we introduce additional\r\n   * meta-programming features.\r\n   *\r\n   * **Warning**: Decorators should not be interdependent because the order of\r\n   * execution of the builder functions in non-deterministic. Builder functions\r\n   * should only be dependent on the state definition object and super function.\r\n   *\r\n   *\r\n   * Existing builder functions and current return values:\r\n   *\r\n   * - **parent** `{object}` - returns the parent state object.\r\n   * - **data** `{object}` - returns state data, including any inherited data that is not\r\n   *   overridden by own values (if any).\r\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\r\n   *   or `null`.\r\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\r\n   *   navigable).\r\n   * - **params** `{object}` - returns an array of state params that are ensured to\r\n   *   be a super-set of parent's params.\r\n   * - **views** `{object}` - returns a views object where each key is an absolute view\r\n   *   name (i.e. \"viewName@stateName\") and each value is the config object\r\n   *   (template, controller) for the view. Even when you don't use the views object\r\n   *   explicitly on a state config, one is still created for you internally.\r\n   *   So by decorating this builder function you have access to decorating template\r\n   *   and controller properties.\r\n   * - **ownParams** `{object}` - returns an array of params that belong to the state,\r\n   *   not including any params defined by ancestor states.\r\n   * - **path** `{string}` - returns the full path from the root down to this state.\r\n   *   Needed for state activation.\r\n   * - **includes** `{object}` - returns an object that includes every state that\r\n   *   would pass a `$state.includes()` test.\r\n   *\r\n   * #### Example:\r\n   * Override the internal 'views' builder with a function that takes the state\r\n   * definition, and a reference to the internal function being overridden:\r\n   * ```js\r\n   * $stateProvider.decorator('views', function (state, parent) {\r\n   *   let result = {},\r\n   *       views = parent(state);\r\n   *\r\n   *   angular.forEach(views, function (config, name) {\r\n   *     let autoName = (state.name + '.' + name).replace('.', '/');\r\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\r\n   *     result[name] = config;\r\n   *   });\r\n   *   return result;\r\n   * });\r\n   *\r\n   * $stateProvider.state('home', {\r\n   *   views: {\r\n   *     'contact.list': { controller: 'ListController' },\r\n   *     'contact.item': { controller: 'ItemController' }\r\n   *   }\r\n   * });\r\n   * ```\r\n   *\r\n   *\r\n   * ```js\r\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\r\n   * // and /partials/home/contact/item.html, respectively.\r\n   * $state.go('home');\r\n   * ```\r\n   *\r\n   * @param {string} name The name of the builder function to decorate.\r\n   * @param {object} func A function that is responsible for decorating the original\r\n   * builder function. The function receives two parameters:\r\n   *\r\n   *   - `{object}` - state - The state config object.\r\n   *   - `{object}` - super - The original builder function.\r\n   *\r\n   * @return {object} $stateProvider - $stateProvider instance\r\n   */\r\n  decorator(name: string, func: BuilderFunction) {\r\n    return this.stateRegistry.decorator(name, func) || this;\r\n  }\r\n\r\n  /**\r\n   * Registers a state\r\n   *\r\n   * ### This is a passthrough to [[StateRegistry.register]].\r\n   *\r\n   * Registers a state configuration under a given state name.\r\n   * The stateConfig object has the following acceptable properties.\r\n   *\r\n   * <a id='template'></a>\r\n   *\r\n   * - **`template`** - {string|function=} - html template as a string or a function that returns\r\n   *   an html template as a string which should be used by the uiView directives. This property\r\n   *   takes precedence over templateUrl.\r\n   *\r\n   *   If `template` is a function, it will be called with the following parameters:\r\n   *\r\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\r\n   *     applying the current state\r\n   *\r\n   * <a id='templateUrl'></a>\r\n   *\r\n   * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\r\n   *   template that should be used by uiView.\r\n   *\r\n   *   If `templateUrl` is a function, it will be called with the following parameters:\r\n   *\r\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\r\n   *     applying the current state\r\n   *\r\n   * <a id='templateProvider'></a>\r\n   *\r\n   * - **`templateProvider`** - {function=} - Provider function that returns HTML content\r\n   *   string.\r\n   *\r\n   * <a id='controller'></a>\r\n   *\r\n   * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\r\n   *   related scope or the name of a registered controller if passed as a string.\r\n   *\r\n   * <a id='controllerProvider'></a>\r\n   *\r\n   * - **`controllerProvider`** - {function=} - Injectable provider function that returns\r\n   *   the actual controller or string.\r\n   *\r\n   * <a id='controllerAs'></a>\r\n   *\r\n   * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\r\n   *   published to scope under the controllerAs name.\r\n   *\r\n   * <a id='resolve'></a>\r\n   *\r\n   * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\r\n   *   should be injected into the controller. If any of these dependencies are promises,\r\n   *   the router will wait for them all to be resolved or one to be rejected before the\r\n   *   controller is instantiated. If all the promises are resolved successfully, the values\r\n   *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\r\n   *   of the promises are rejected the $stateChangeError event is fired. The map object is:\r\n   *\r\n   *   - key - {string}: name of dependency to be injected into controller\r\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\r\n   *     it is injected and return value it treated as dependency. If result is a promise, it is\r\n   *     resolved before its value is injected into controller.\r\n   *\r\n   * <a id='url'></a>\r\n   *\r\n   * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\r\n   *   transitioned to, the `$stateParams` service will be populated with any\r\n   *   parameters that were passed.\r\n   *\r\n   * <a id='params'></a>\r\n   *\r\n   * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\r\n   *   use this within a state if you are not using url. Otherwise you can specify your\r\n   *   parameters within the url. When a state is navigated or transitioned to, the\r\n   *   $stateParams service will be populated with any parameters that were passed.\r\n   *\r\n   * <a id='views'></a>\r\n   *\r\n   * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\r\n   *   manually/explicitly.\r\n   *\r\n   * <a id='abstract'></a>\r\n   *\r\n   * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\r\n   *   but can provide inherited properties to its common children states.\r\n   *\r\n   * <a id='onEnter'></a>\r\n   *\r\n   * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\r\n   *   to trigger an action or dispatch an event, such as opening a dialog.\r\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\r\n   *\r\n   * <a id='onExit'></a>\r\n   *\r\n   * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\r\n   *   trigger an action or dispatch an event, such as opening a dialog.\r\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\r\n   *\r\n   * <a id='reloadOnSearch'></a>\r\n   *\r\n   * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\r\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\r\n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\r\n   *\r\n   * <a id='data'></a>\r\n   *\r\n   * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\r\n   *\r\n   * #### Example:\r\n   * Some state name examples\r\n   * ```js\r\n   * // stateName can be a single top-level name (must be unique).\r\n   * $stateProvider.state(\"home\", {});\r\n   *\r\n   * // Or it can be a nested state name. This state is a child of the\r\n   * // above \"home\" state.\r\n   * $stateProvider.state(\"home.newest\", {});\r\n   *\r\n   * // Nest states as deeply as needed.\r\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\r\n   *\r\n   * // state() returns $stateProvider, so you can chain state declarations.\r\n   * $stateProvider\r\n   *   .state(\"home\", {})\r\n   *   .state(\"about\", {})\r\n   *   .state(\"contacts\", {});\r\n   * ```\r\n   *\r\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\r\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\r\n   * @param {object} definition State configuration object.\r\n   */\r\n  state(name: string, definition: Ng1StateDeclaration): StateProvider;\r\n  state(definition: Ng1StateDeclaration): StateProvider;\r\n  state(name: any, definition?: any) {\r\n    if (isObject(name)) {\r\n      definition = name;\r\n    } else {\r\n      definition.name = name;\r\n    }\r\n    this.stateRegistry.register(definition);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an invalid state handler\r\n   *\r\n   * This is a passthrough to [[StateService.onInvalid]] for ng1.\r\n   */\r\n\r\n  onInvalid(callback: OnInvalidCallback): Function {\r\n    return this.stateService.onInvalid(callback);\r\n  }\r\n}\r\n",
    "/** @publicapi @module ng1 */ /** */\r\nimport {\r\n  StateObject,\r\n  TransitionStateHookFn,\r\n  HookResult,\r\n  Transition,\r\n  services,\r\n  ResolveContext,\r\n  extend,\r\n} from '@uirouter/core';\r\nimport { getLocals } from '../services';\r\nimport { Ng1StateDeclaration } from '../interface';\r\n\r\n/**\r\n * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\r\n * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\r\n *\r\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\r\n * ensures that those hooks are injectable for @uirouter/angularjs (ng1).\r\n *\r\n * @internalapi\r\n */\r\nexport const getStateHookBuilder = (hookName: 'onEnter' | 'onExit' | 'onRetain') =>\r\n  function stateHookBuilder(stateObject: StateObject): TransitionStateHookFn {\r\n    const hook = stateObject[hookName];\r\n    const pathname = hookName === 'onExit' ? 'from' : 'to';\r\n\r\n    function decoratedNg1Hook(trans: Transition, state: Ng1StateDeclaration): HookResult {\r\n      const resolveContext = new ResolveContext(trans.treeChanges(pathname));\r\n      const subContext = resolveContext.subContext(state.$$state());\r\n      const locals = extend(getLocals(subContext), { $state$: state, $transition$: trans });\r\n      return services.$injector.invoke(hook, this, locals);\r\n    }\r\n\r\n    return hook ? decoratedNg1Hook : undefined;\r\n  };\r\n",
    "/** @publicapi @module ng1 */ /** */\r\nimport { LocationConfig, LocationServices, UIRouter, ParamType, isDefined } from '@uirouter/core';\r\nimport { val, createProxyFunctions, removeFrom, isObject } from '@uirouter/core';\r\nimport { ILocationService, ILocationProvider, IWindowService } from 'angular';\r\n\r\n/**\r\n * Implements UI-Router LocationServices and LocationConfig using Angular 1's $location service\r\n * @internalapi\r\n */\r\nexport class Ng1LocationServices implements LocationConfig, LocationServices {\r\n  private $locationProvider: ILocationProvider;\r\n  private $location: ILocationService;\r\n  private $sniffer: any;\r\n  private $browser: any;\r\n  private $window: IWindowService;\r\n\r\n  path;\r\n  search;\r\n  hash;\r\n  hashPrefix;\r\n  port;\r\n  protocol;\r\n  host;\r\n\r\n  private _baseHref: string;\r\n\r\n  // .onChange() registry\r\n  private _urlListeners: Function[] = [];\r\n\r\n  /**\r\n   * Applys ng1-specific path parameter encoding\r\n   *\r\n   * The Angular 1 `$location` service is a bit weird.\r\n   * It doesn't allow slashes to be encoded/decoded bi-directionally.\r\n   *\r\n   * See the writeup at https://github.com/angular-ui/ui-router/issues/2598\r\n   *\r\n   * This code patches the `path` parameter type so it encoded/decodes slashes as ~2F\r\n   *\r\n   * @param router\r\n   */\r\n  static monkeyPatchPathParameterType(router: UIRouter) {\r\n    const pathType: ParamType = router.urlMatcherFactory.type('path');\r\n\r\n    pathType.encode = (x: any) =>\r\n      x != null ? x.toString().replace(/(~|\\/)/g, (m) => ({ '~': '~~', '/': '~2F' }[m])) : x;\r\n\r\n    pathType.decode = (x: string) =>\r\n      x != null ? x.toString().replace(/(~~|~2F)/g, (m) => ({ '~~': '~', '~2F': '/' }[m])) : x;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  dispose() {}\r\n\r\n  constructor($locationProvider: ILocationProvider) {\r\n    this.$locationProvider = $locationProvider;\r\n    const _lp = val($locationProvider);\r\n    createProxyFunctions(_lp, this, _lp, ['hashPrefix']);\r\n  }\r\n\r\n  onChange(callback: Function) {\r\n    this._urlListeners.push(callback);\r\n    return () => removeFrom(this._urlListeners)(callback);\r\n  }\r\n\r\n  html5Mode() {\r\n    let html5Mode: any = this.$locationProvider.html5Mode();\r\n    html5Mode = isObject(html5Mode) ? html5Mode.enabled : html5Mode;\r\n    return html5Mode && this.$sniffer.history;\r\n  }\r\n\r\n  baseHref() {\r\n    return this._baseHref || (this._baseHref = this.$browser.baseHref() || this.$window.location.pathname);\r\n  }\r\n\r\n  url(newUrl?: string, replace = false, state?) {\r\n    if (isDefined(newUrl)) this.$location.url(newUrl);\r\n    if (replace) this.$location.replace();\r\n    if (state) this.$location.state(state);\r\n    return this.$location.url();\r\n  }\r\n\r\n  _runtimeServices($rootScope, $location: ILocationService, $sniffer, $browser, $window: IWindowService) {\r\n    this.$location = $location;\r\n    this.$sniffer = $sniffer;\r\n    this.$browser = $browser;\r\n    this.$window = $window;\r\n\r\n    // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\r\n    $rootScope.$on('$locationChangeSuccess', (evt) => this._urlListeners.forEach((fn) => fn(evt)));\r\n    const _loc = val($location);\r\n\r\n    // Bind these LocationService functions to $location\r\n    createProxyFunctions(_loc, this, _loc, ['replace', 'path', 'search', 'hash']);\r\n    // Bind these LocationConfig functions to $location\r\n    createProxyFunctions(_loc, this, _loc, ['port', 'protocol', 'host']);\r\n  }\r\n}\r\n",
    "/** @publicapi @module url */ /** */\r\nimport {\r\n  UIRouter,\r\n  LocationServices,\r\n  $InjectorLike,\r\n  BaseUrlRule,\r\n  UrlRuleHandlerFn,\r\n  UrlMatcher,\r\n  IInjectable,\r\n  UrlRouter,\r\n} from '@uirouter/core';\r\nimport { services, isString, isFunction, isArray, identity } from '@uirouter/core';\r\n\r\nexport interface RawNg1RuleFunction {\r\n  ($injector: $InjectorLike, $location: LocationServices): string | void;\r\n}\r\n\r\n/**\r\n * Manages rules for client-side URL\r\n *\r\n * ### Deprecation warning:\r\n * This class is now considered to be an internal API\r\n * Use the [[UrlService]] instead.\r\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\r\n *\r\n * This class manages the router rules for what to do when the URL changes.\r\n *\r\n * This provider remains for backwards compatibility.\r\n *\r\n * @internalapi\r\n * @deprecated\r\n */\r\nexport class UrlRouterProvider {\r\n  static injectableHandler(router: UIRouter, handler: IInjectable): UrlRuleHandlerFn {\r\n    return (match) => services.$injector.invoke(handler, null, { $match: match, $stateParams: router.globals.params });\r\n  }\r\n\r\n  /** @hidden */\r\n  constructor(/** @hidden */ private router: UIRouter) {}\r\n\r\n  /** @hidden */\r\n  $get(): UrlRouter {\r\n    const urlService = this.router.urlService;\r\n    this.router.urlRouter.update(true);\r\n    if (!urlService.interceptDeferred) urlService.listen();\r\n    return this.router.urlRouter;\r\n  }\r\n\r\n  /**\r\n   * Registers a url handler function.\r\n   *\r\n   * Registers a low level url handler (a `rule`).\r\n   * A rule detects specific URL patterns and returns a redirect, or performs some action.\r\n   *\r\n   * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\r\n   *\r\n   * #### Example:\r\n   * ```js\r\n   * var app = angular.module('app', ['ui.router.router']);\r\n   *\r\n   * app.config(function ($urlRouterProvider) {\r\n   *   // Here's an example of how you might allow case insensitive urls\r\n   *   $urlRouterProvider.rule(function ($injector, $location) {\r\n   *     var path = $location.path(),\r\n   *         normalized = path.toLowerCase();\r\n   *\r\n   *     if (path !== normalized) {\r\n   *       return normalized;\r\n   *     }\r\n   *   });\r\n   * });\r\n   * ```\r\n   *\r\n   * @param ruleFn\r\n   * Handler function that takes `$injector` and `$location` services as arguments.\r\n   * You can use them to detect a url and return a different url as a string.\r\n   *\r\n   * @return [[UrlRouterProvider]] (`this`)\r\n   */\r\n  rule(ruleFn: RawNg1RuleFunction): UrlRouterProvider {\r\n    if (!isFunction(ruleFn)) throw new Error(\"'rule' must be a function\");\r\n\r\n    const match = () => ruleFn(services.$injector, this.router.locationService);\r\n\r\n    const rule = new BaseUrlRule(match, identity);\r\n    this.router.urlService.rules.rule(rule);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Defines the path or behavior to use when no url can be matched.\r\n   *\r\n   * #### Example:\r\n   * ```js\r\n   * var app = angular.module('app', ['ui.router.router']);\r\n   *\r\n   * app.config(function ($urlRouterProvider) {\r\n   *   // if the path doesn't match any of the urls you configured\r\n   *   // otherwise will take care of routing the user to the\r\n   *   // specified url\r\n   *   $urlRouterProvider.otherwise('/index');\r\n   *\r\n   *   // Example of using function rule as param\r\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\r\n   *     return '/a/valid/url';\r\n   *   });\r\n   * });\r\n   * ```\r\n   *\r\n   * @param rule\r\n   * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\r\n   * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\r\n   *\r\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\r\n   */\r\n  otherwise(rule: string | RawNg1RuleFunction): UrlRouterProvider {\r\n    const urlRules = this.router.urlService.rules;\r\n    if (isString(rule)) {\r\n      urlRules.otherwise(rule);\r\n    } else if (isFunction(rule)) {\r\n      urlRules.otherwise(() => rule(services.$injector, this.router.locationService));\r\n    } else {\r\n      throw new Error(\"'rule' must be a string or function\");\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers a handler for a given url matching.\r\n   *\r\n   * If the handler is a string, it is\r\n   * treated as a redirect, and is interpolated according to the syntax of match\r\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\r\n   *\r\n   * If the handler is a function, it is injectable.\r\n   * It gets invoked if `$location` matches.\r\n   * You have the option of inject the match object as `$match`.\r\n   *\r\n   * The handler can return\r\n   *\r\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\r\n   *   will continue trying to find another one that matches.\r\n   * - **string** which is treated as a redirect and passed to `$location.url()`\r\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\r\n   *\r\n   * #### Example:\r\n   * ```js\r\n   * var app = angular.module('app', ['ui.router.router']);\r\n   *\r\n   * app.config(function ($urlRouterProvider) {\r\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\r\n   *     if ($state.$current.navigable !== state ||\r\n   *         !equalForKeys($match, $stateParams) {\r\n   *      $state.transitionTo(state, $match, false);\r\n   *     }\r\n   *   });\r\n   * });\r\n   * ```\r\n   *\r\n   * @param what A pattern string to match, compiled as a [[UrlMatcher]].\r\n   * @param handler The path (or function that returns a path) that you want to redirect your user to.\r\n   * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\r\n   *\r\n   * Note: the handler may also invoke arbitrary code, such as `$state.go()`\r\n   */\r\n  when(what: RegExp | UrlMatcher | string, handler: string | IInjectable): this {\r\n    if (isArray(handler) || isFunction(handler)) {\r\n      handler = UrlRouterProvider.injectableHandler(this.router, handler);\r\n    }\r\n\r\n    this.router.urlService.rules.when(what, handler as any);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Disables monitoring of the URL.\r\n   *\r\n   * Call this method before UI-Router has bootstrapped.\r\n   * It will stop UI-Router from performing the initial url sync.\r\n   *\r\n   * This can be useful to perform some asynchronous initialization before the router starts.\r\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\r\n   *\r\n   * #### Example:\r\n   * ```js\r\n   * var app = angular.module('app', ['ui.router']);\r\n   *\r\n   * app.config(function ($urlRouterProvider) {\r\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\r\n   *   $urlRouterProvider.deferIntercept();\r\n   * })\r\n   *\r\n   * app.run(function (MyService, $urlRouter, $http) {\r\n   *   $http.get(\"/stuff\").then(function(resp) {\r\n   *     MyService.doStuff(resp.data);\r\n   *     $urlRouter.listen();\r\n   *     $urlRouter.sync();\r\n   *   });\r\n   * });\r\n   * ```\r\n   *\r\n   * @param defer Indicates whether to defer location change interception.\r\n   *        Passing no parameter is equivalent to `true`.\r\n   */\r\n  deferIntercept(defer?: boolean): void {\r\n    this.router.urlService.deferIntercept(defer);\r\n  }\r\n}\r\n",
    "/* eslint-disable @typescript-eslint/no-empty-function */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/**\r\n * # Angular 1 types\r\n *\r\n * UI-Router core provides various Typescript types which you can use for code completion and validating parameter values, etc.\r\n * The customizations to the core types for Angular UI-Router are documented here.\r\n *\r\n * The optional [[$resolve]] service is also documented here.\r\n *\r\n * @preferred @publicapi @module ng1\r\n */ /** */\r\nimport { ng as angular } from './angular';\r\nimport {\r\n  IRootScopeService,\r\n  IQService,\r\n  ILocationService,\r\n  ILocationProvider,\r\n  IHttpService,\r\n  ITemplateCacheService,\r\n} from 'angular';\r\nimport {\r\n  services,\r\n  applyPairs,\r\n  isString,\r\n  trace,\r\n  extend,\r\n  UIRouter,\r\n  StateService,\r\n  UrlRouter,\r\n  UrlMatcherFactory,\r\n  ResolveContext,\r\n  unnestR,\r\n  TypedMap,\r\n} from '@uirouter/core';\r\nimport { ng1ViewsBuilder, getNg1ViewConfigFactory } from './statebuilders/views';\r\nimport { TemplateFactory } from './templateFactory';\r\nimport { StateProvider } from './stateProvider';\r\nimport { getStateHookBuilder } from './statebuilders/onEnterExitRetain';\r\nimport { Ng1LocationServices } from './locationServices';\r\nimport { UrlRouterProvider } from './urlRouterProvider';\r\nimport IInjectorService = angular.auto.IInjectorService;\r\n\r\nangular.module('ui.router.angular1', []);\r\nconst mod_init = angular.module('ui.router.init', ['ng']);\r\nconst mod_util = angular.module('ui.router.util', ['ui.router.init']);\r\nconst mod_rtr = angular.module('ui.router.router', ['ui.router.util']);\r\nconst mod_state = angular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);\r\nconst mod_main = angular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);\r\nconst mod_cmpt = angular.module('ui.router.compat', ['ui.router']);\r\n\r\ndeclare module '@uirouter/core/lib/router' {\r\n  interface UIRouter {\r\n    /** @hidden */\r\n    stateProvider: StateProvider;\r\n    /** @hidden */\r\n    urlRouterProvider: UrlRouterProvider;\r\n  }\r\n}\r\n\r\nlet router: UIRouter = null;\r\n\r\n$uiRouterProvider.$inject = ['$locationProvider'];\r\n/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */\r\nfunction $uiRouterProvider($locationProvider: ILocationProvider) {\r\n  // Create a new instance of the Router when the $uiRouterProvider is initialized\r\n  router = this.router = new UIRouter();\r\n  router.stateProvider = new StateProvider(router.stateRegistry, router.stateService);\r\n\r\n  // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties\r\n  router.stateRegistry.decorator('views', ng1ViewsBuilder);\r\n  router.stateRegistry.decorator('onExit', getStateHookBuilder('onExit'));\r\n  router.stateRegistry.decorator('onRetain', getStateHookBuilder('onRetain'));\r\n  router.stateRegistry.decorator('onEnter', getStateHookBuilder('onEnter'));\r\n\r\n  router.viewService._pluginapi._viewConfigFactory('ng1', getNg1ViewConfigFactory());\r\n\r\n  // Disable decoding of params by UrlMatcherFactory because $location already handles this\r\n  router.urlService.config._decodeParams = false;\r\n\r\n  const ng1LocationService = (router.locationService = router.locationConfig = new Ng1LocationServices(\r\n    $locationProvider\r\n  ));\r\n\r\n  Ng1LocationServices.monkeyPatchPathParameterType(router);\r\n\r\n  // backwards compat: also expose router instance as $uiRouterProvider.router\r\n  router['router'] = router;\r\n  router['$get'] = $get;\r\n  $get.$inject = ['$location', '$browser', '$window', '$sniffer', '$rootScope', '$http', '$templateCache'];\r\n  function $get(\r\n    $location: ILocationService,\r\n    $browser: any,\r\n    $window: any,\r\n    $sniffer: any,\r\n    $rootScope: ng.IScope,\r\n    $http: IHttpService,\r\n    $templateCache: ITemplateCacheService\r\n  ) {\r\n    ng1LocationService._runtimeServices($rootScope, $location, $sniffer, $browser, $window);\r\n    delete router['router'];\r\n    delete router['$get'];\r\n    return router;\r\n  }\r\n  return router;\r\n}\r\n\r\nconst getProviderFor = (serviceName) => [\r\n  '$uiRouterProvider',\r\n  ($urp) => {\r\n    const service = $urp.router[serviceName];\r\n    service['$get'] = () => service;\r\n    return service;\r\n  },\r\n];\r\n\r\n// This effectively calls $get() on `$uiRouterProvider` to trigger init (when ng enters runtime)\r\nrunBlock.$inject = ['$injector', '$q', '$uiRouter'];\r\nfunction runBlock($injector: IInjectorService, $q: IQService, $uiRouter: UIRouter) {\r\n  services.$injector = $injector;\r\n  services.$q = <any>$q;\r\n\r\n  // https://github.com/angular-ui/ui-router/issues/3678\r\n  if (!Object.prototype.hasOwnProperty.call($injector, 'strictDi')) {\r\n    try {\r\n      $injector.invoke(function (checkStrictDi) {});\r\n    } catch (error) {\r\n      $injector.strictDi = !!/strict mode/.exec(error && error.toString());\r\n    }\r\n  }\r\n\r\n  // The $injector is now available.\r\n  // Find any resolvables that had dependency annotation deferred\r\n  $uiRouter.stateRegistry\r\n    .get()\r\n    .map((x) => x.$$state().resolvables)\r\n    .reduce(unnestR, [])\r\n    .filter((x) => x.deps === 'deferred')\r\n    .forEach((resolvable) => (resolvable.deps = $injector.annotate(resolvable.resolveFn, $injector.strictDi)));\r\n}\r\n\r\n// $urlRouter service and $urlRouterProvider\r\nconst getUrlRouterProvider = (uiRouter: UIRouter) => (uiRouter.urlRouterProvider = new UrlRouterProvider(uiRouter));\r\n\r\n// $state service and $stateProvider\r\n// $urlRouter service and $urlRouterProvider\r\nconst getStateProvider = () => extend(router.stateProvider, { $get: () => router.stateService });\r\n\r\nwatchDigests.$inject = ['$rootScope'];\r\nexport function watchDigests($rootScope: IRootScopeService) {\r\n  $rootScope.$watch(function () {\r\n    trace.approximateDigests++;\r\n  });\r\n}\r\n\r\nmod_init.provider('$uiRouter', <any>$uiRouterProvider);\r\nmod_rtr.provider('$urlRouter', ['$uiRouterProvider', getUrlRouterProvider]);\r\nmod_util.provider('$urlService', getProviderFor('urlService'));\r\nmod_util.provider('$urlMatcherFactory', ['$uiRouterProvider', () => router.urlMatcherFactory]);\r\nmod_util.provider('$templateFactory', () => new TemplateFactory());\r\nmod_state.provider('$stateRegistry', getProviderFor('stateRegistry'));\r\nmod_state.provider('$uiRouterGlobals', getProviderFor('globals'));\r\nmod_state.provider('$transitions', getProviderFor('transitionService'));\r\nmod_state.provider('$state', ['$uiRouterProvider', getStateProvider]);\r\n\r\nmod_state.factory('$stateParams', ['$uiRouter', ($uiRouter: UIRouter) => $uiRouter.globals.params]);\r\nmod_main.factory('$view', () => router.viewService);\r\nmod_main.service('$trace', () => trace);\r\n\r\nmod_main.run(watchDigests);\r\nmod_util.run(['$urlMatcherFactory', function ($urlMatcherFactory: UrlMatcherFactory) {}]);\r\nmod_state.run(['$state', function ($state: StateService) {}]);\r\nmod_rtr.run(['$urlRouter', function ($urlRouter: UrlRouter) {}]);\r\nmod_init.run(runBlock);\r\n\r\n/** @hidden TODO: find a place to move this */\r\nexport const getLocals = (ctx: ResolveContext): TypedMap<any> => {\r\n  const tokens = ctx.getTokens().filter(isString);\r\n\r\n  const tuples = tokens.map((key) => {\r\n    const resolvable = ctx.getResolvable(key);\r\n    const waitPolicy = ctx.getPolicy(resolvable).async;\r\n    return [key, waitPolicy === 'NOWAIT' ? resolvable.promise : resolvable.data];\r\n  });\r\n\r\n  return tuples.reduce(applyPairs, {});\r\n};\r\n",
    "/* eslint-disable @typescript-eslint/no-empty-interface */\r\n/* eslint-disable prefer-const */\r\n/**\r\n * # Angular 1 Directives\r\n *\r\n * These are the directives included in UI-Router for Angular 1.\r\n * These directives are used in templates to create viewports and link/navigate to states.\r\n *\r\n * @preferred @publicapi @module directives\r\n */ /** */\r\nimport { ng as angular } from '../angular';\r\nimport { IAugmentedJQuery, ITimeoutService, IScope, IInterpolateService } from 'angular';\r\n\r\nimport {\r\n  Obj,\r\n  extend,\r\n  forEach,\r\n  tail,\r\n  isString,\r\n  isObject,\r\n  isArray,\r\n  parse,\r\n  noop,\r\n  unnestR,\r\n  identity,\r\n  uniqR,\r\n  inArray,\r\n  removeFrom,\r\n  RawParams,\r\n  PathNode,\r\n  StateOrName,\r\n  StateService,\r\n  StateDeclaration,\r\n  UIRouter,\r\n} from '@uirouter/core';\r\nimport { UIViewData } from './viewDirective';\r\n\r\n/** @hidden Used for typedoc */\r\nexport interface ng1_directive {}\r\n\r\n/** @hidden */\r\nfunction parseStateRef(ref: string) {\r\n  const paramsOnly = ref.match(/^\\s*({[^}]*})\\s*$/);\r\n  if (paramsOnly) ref = '(' + paramsOnly[1] + ')';\r\n\r\n  const parsed = ref.replace(/\\n/g, ' ').match(/^\\s*([^(]*?)\\s*(\\((.*)\\))?\\s*$/);\r\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\r\n  return { state: parsed[1] || null, paramExpr: parsed[3] || null };\r\n}\r\n\r\n/** @hidden */\r\nfunction stateContext(el: IAugmentedJQuery) {\r\n  const $uiView: UIViewData = (el.parent() as IAugmentedJQuery).inheritedData('$uiView');\r\n  const path: PathNode[] = parse('$cfg.path')($uiView);\r\n  return path ? tail(path).state.name : undefined;\r\n}\r\n\r\n/** @hidden */\r\nfunction processedDef($state: StateService, $element: IAugmentedJQuery, def: Def): Def {\r\n  const uiState = def.uiState || $state.current.name;\r\n  const uiStateOpts = extend(defaultOpts($element, $state), def.uiStateOpts || {});\r\n  const href = $state.href(uiState, def.uiStateParams, uiStateOpts);\r\n  return { uiState, uiStateParams: def.uiStateParams, uiStateOpts, href };\r\n}\r\n\r\n/** @hidden */\r\ninterface TypeInfo {\r\n  attr: string;\r\n  isAnchor: boolean;\r\n  clickable: boolean;\r\n}\r\n\r\n/** @hidden */\r\nfunction getTypeInfo(el: IAugmentedJQuery): TypeInfo {\r\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\r\n  const isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\r\n  const isForm = el[0].nodeName === 'FORM';\r\n\r\n  return {\r\n    attr: isForm ? 'action' : isSvg ? 'xlink:href' : 'href',\r\n    isAnchor: el.prop('tagName').toUpperCase() === 'A',\r\n    clickable: !isForm,\r\n  };\r\n}\r\n\r\n/** @hidden */\r\nfunction clickHook(\r\n  el: IAugmentedJQuery,\r\n  $state: StateService,\r\n  $timeout: ITimeoutService,\r\n  type: TypeInfo,\r\n  getDef: () => Def\r\n) {\r\n  return function (e: JQueryMouseEventObject) {\r\n    const button = e.which || e.button,\r\n      target = getDef();\r\n\r\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || el.attr('target'))) {\r\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\r\n      const transition = $timeout(function () {\r\n        if (!el.attr('disabled')) {\r\n          $state.go(target.uiState, target.uiStateParams, target.uiStateOpts);\r\n        }\r\n      });\r\n      e.preventDefault();\r\n\r\n      // if the state has no URL, ignore one preventDefault from the <a> directive.\r\n      let ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\r\n\r\n      e.preventDefault = function () {\r\n        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\r\n      };\r\n    }\r\n  };\r\n}\r\n\r\n/** @hidden */\r\nfunction defaultOpts(el: IAugmentedJQuery, $state: StateService) {\r\n  return {\r\n    relative: stateContext(el) || $state.$current,\r\n    inherit: true,\r\n    source: 'sref',\r\n  };\r\n}\r\n\r\n/** @hidden */\r\nfunction bindEvents(element: IAugmentedJQuery, scope: IScope, hookFn: EventListener, uiStateOpts: any): void {\r\n  let events;\r\n\r\n  if (uiStateOpts) {\r\n    events = uiStateOpts.events;\r\n  }\r\n\r\n  if (!isArray(events)) {\r\n    events = ['click'];\r\n  }\r\n\r\n  const on = element.on ? 'on' : 'bind';\r\n  for (const event of events) {\r\n    element[on](event, hookFn);\r\n  }\r\n\r\n  scope.$on('$destroy', function () {\r\n    const off = element.off ? 'off' : 'unbind';\r\n    for (const event of events) {\r\n      element[off](event, hookFn as any);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * `ui-sref`: A directive for linking to a state\r\n *\r\n * A directive which links to a state (and optionally, parameters).\r\n * When clicked, this directive activates the linked state with the supplied parameter values.\r\n *\r\n * ### Linked State\r\n * The attribute value of the `ui-sref` is the name of the state to link to.\r\n *\r\n * #### Example:\r\n * This will activate the `home` state when the link is clicked.\r\n * ```html\r\n * <a ui-sref=\"home\">Home</a>\r\n * ```\r\n *\r\n * ### Relative Links\r\n * You can also use relative state paths within `ui-sref`, just like a relative path passed to `$state.go()` ([[StateService.go]]).\r\n * You just need to be aware that the path is relative to the state that *created* the link.\r\n * This allows a state to create a relative `ui-sref` which always targets the same destination.\r\n *\r\n * #### Example:\r\n * Both these links are relative to the parent state, even when a child state is currently active.\r\n * ```html\r\n * <a ui-sref=\".child1\">child 1 state</a>\r\n * <a ui-sref=\".child2\">child 2 state</a>\r\n * ```\r\n *\r\n * This link activates the parent state.\r\n * ```html\r\n * <a ui-sref=\"^\">Return</a>\r\n * ```\r\n *\r\n * ### hrefs\r\n * If the linked state has a URL, the directive will automatically generate and\r\n * update the `href` attribute (using the [[StateService.href]]  method).\r\n *\r\n * #### Example:\r\n * Assuming the `users` state has a url of `/users/`\r\n * ```html\r\n * <a ui-sref=\"users\" href=\"/users/\">Users</a>\r\n * ```\r\n *\r\n * ### Parameter Values\r\n * In addition to the state name, a `ui-sref` can include parameter values which are applied when activating the state.\r\n * Param values can be provided in the `ui-sref` value after the state name, enclosed by parentheses.\r\n * The content inside the parentheses is an expression, evaluated to the parameter values.\r\n *\r\n * #### Example:\r\n * This example renders a list of links to users.\r\n * The state's `userId` parameter value comes from each user's `user.id` property.\r\n * ```html\r\n * <li ng-repeat=\"user in users\">\r\n *   <a ui-sref=\"users.detail({ userId: user.id })\">{{ user.displayName }}</a>\r\n * </li>\r\n * ```\r\n *\r\n * Note:\r\n * The parameter values expression is `$watch`ed for updates.\r\n *\r\n * ### Transition Options\r\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-sref-opts` attribute.\r\n * Options are restricted to `location`, `inherit`, and `reload`.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <a ui-sref=\"home\" ui-sref-opts=\"{ reload: true }\">Home</a>\r\n * ```\r\n *\r\n * ### Other DOM Events\r\n *\r\n * You can also customize which DOM events to respond to (instead of `click`) by\r\n * providing an `events` array in the `ui-sref-opts` attribute.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <input type=\"text\" ui-sref=\"contacts\" ui-sref-opts=\"{ events: ['change', 'blur'] }\">\r\n * ```\r\n *\r\n * ### Highlighting the active link\r\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\r\n *\r\n * ### Examples\r\n * If you have the following template:\r\n *\r\n * ```html\r\n * <a ui-sref=\"home\">Home</a>\r\n * <a ui-sref=\"about\">About</a>\r\n * <a ui-sref=\"{page: 2}\">Next page</a>\r\n *\r\n * <ul>\r\n *     <li ng-repeat=\"contact in contacts\">\r\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\r\n *     </li>\r\n * </ul>\r\n * ```\r\n *\r\n * Then (assuming the current state is `contacts`) the rendered html including hrefs would be:\r\n *\r\n * ```html\r\n * <a href=\"#/home\" ui-sref=\"home\">Home</a>\r\n * <a href=\"#/about\" ui-sref=\"about\">About</a>\r\n * <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\r\n *\r\n * <ul>\r\n *     <li ng-repeat=\"contact in contacts\">\r\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\r\n *     </li>\r\n *     <li ng-repeat=\"contact in contacts\">\r\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\r\n *     </li>\r\n *     <li ng-repeat=\"contact in contacts\">\r\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\r\n *     </li>\r\n * </ul>\r\n *\r\n * <a href=\"#/home\" ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\r\n * ```\r\n *\r\n * ### Notes\r\n *\r\n * - You can use `ui-sref` to change **only the parameter values** by omitting the state name and parentheses.\r\n * #### Example:\r\n * Sets the `lang` parameter to `en` and remains on the same state.\r\n *\r\n * ```html\r\n * <a ui-sref=\"{ lang: 'en' }\">English</a>\r\n * ```\r\n *\r\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\r\n *\r\n * - Unlike the parameter values expression, the state name is not `$watch`ed (for performance reasons).\r\n * If you need to dynamically update the state being linked to, use the fully dynamic [[uiState]] directive.\r\n */\r\nlet uiSrefDirective: ng1_directive;\r\nuiSrefDirective = [\r\n  '$uiRouter',\r\n  '$timeout',\r\n  function $StateRefDirective($uiRouter: UIRouter, $timeout: ITimeoutService) {\r\n    const $state = $uiRouter.stateService;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\r\n      link: function (scope: IScope, element: IAugmentedJQuery, attrs: any, uiSrefActive: any) {\r\n        const type = getTypeInfo(element);\r\n        const active = uiSrefActive[1] || uiSrefActive[0];\r\n        let unlinkInfoFn: Function = null;\r\n\r\n        const rawDef = {} as Def;\r\n        const getDef = () => processedDef($state, element, rawDef);\r\n\r\n        const ref = parseStateRef(attrs.uiSref);\r\n        rawDef.uiState = ref.state;\r\n        rawDef.uiStateOpts = attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {};\r\n\r\n        function update() {\r\n          const def = getDef();\r\n          if (unlinkInfoFn) unlinkInfoFn();\r\n          if (active) unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\r\n          if (def.href != null) attrs.$set(type.attr, def.href);\r\n        }\r\n\r\n        if (ref.paramExpr) {\r\n          scope.$watch(\r\n            ref.paramExpr,\r\n            function (val) {\r\n              rawDef.uiStateParams = extend({}, val);\r\n              update();\r\n            },\r\n            true\r\n          );\r\n          rawDef.uiStateParams = extend({}, scope.$eval(ref.paramExpr));\r\n        }\r\n\r\n        update();\r\n\r\n        scope.$on('$destroy', <any>$uiRouter.stateRegistry.onStatesChanged(update));\r\n        scope.$on('$destroy', <any>$uiRouter.transitionService.onSuccess({}, update));\r\n\r\n        if (!type.clickable) return;\r\n        const hookFn = clickHook(element, $state, $timeout, type, getDef);\r\n        bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\r\n      },\r\n    };\r\n  },\r\n];\r\n\r\n/**\r\n * `ui-state`: A fully dynamic directive for linking to a state\r\n *\r\n * A directive which links to a state (and optionally, parameters).\r\n * When clicked, this directive activates the linked state with the supplied parameter values.\r\n *\r\n * **This directive is very similar to [[uiSref]], but it `$observe`s and `$watch`es/evaluates all its inputs.**\r\n *\r\n * A directive which links to a state (and optionally, parameters).\r\n * When clicked, this directive activates the linked state with the supplied parameter values.\r\n *\r\n * ### Linked State\r\n * The attribute value of `ui-state` is an expression which is `$watch`ed and evaluated as the state to link to.\r\n * **This is in contrast with `ui-sref`, which takes a state name as a string literal.**\r\n *\r\n * #### Example:\r\n * Create a list of links.\r\n * ```html\r\n * <li ng-repeat=\"link in navlinks\">\r\n *   <a ui-state=\"link.state\">{{ link.displayName }}</a>\r\n * </li>\r\n * ```\r\n *\r\n * ### Relative Links\r\n * If the expression evaluates to a relative path, it is processed like [[uiSref]].\r\n * You just need to be aware that the path is relative to the state that *created* the link.\r\n * This allows a state to create relative `ui-state` which always targets the same destination.\r\n *\r\n * ### hrefs\r\n * If the linked state has a URL, the directive will automatically generate and\r\n * update the `href` attribute (using the [[StateService.href]]  method).\r\n *\r\n * ### Parameter Values\r\n * In addition to the state name expression, a `ui-state` can include parameter values which are applied when activating the state.\r\n * Param values should be provided using the `ui-state-params` attribute.\r\n * The `ui-state-params` attribute value is `$watch`ed and evaluated as an expression.\r\n *\r\n * #### Example:\r\n * This example renders a list of links with param values.\r\n * The state's `userId` parameter value comes from each user's `user.id` property.\r\n * ```html\r\n * <li ng-repeat=\"link in navlinks\">\r\n *   <a ui-state=\"link.state\" ui-state-params=\"link.params\">{{ link.displayName }}</a>\r\n * </li>\r\n * ```\r\n *\r\n * ### Transition Options\r\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-state-opts` attribute.\r\n * Options are restricted to `location`, `inherit`, and `reload`.\r\n * The value of the `ui-state-opts` is `$watch`ed and evaluated as an expression.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <a ui-state=\"returnto.state\" ui-state-opts=\"{ reload: true }\">Home</a>\r\n * ```\r\n *\r\n * ### Other DOM Events\r\n *\r\n * You can also customize which DOM events to respond to (instead of `click`) by\r\n * providing an `events` array in the `ui-state-opts` attribute.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <input type=\"text\" ui-state=\"contacts\" ui-state-opts=\"{ events: ['change', 'blur'] }\">\r\n * ```\r\n *\r\n * ### Highlighting the active link\r\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\r\n *\r\n * ### Notes\r\n *\r\n * - You can use `ui-params` to change **only the parameter values** by omitting the state name and supplying only `ui-state-params`.\r\n *   However, it might be simpler to use [[uiSref]] parameter-only links.\r\n *\r\n * #### Example:\r\n * Sets the `lang` parameter to `en` and remains on the same state.\r\n *\r\n * ```html\r\n * <a ui-state=\"\" ui-state-params=\"{ lang: 'en' }\">English</a>\r\n * ```\r\n *\r\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\r\n * ```\r\n */\r\nlet uiStateDirective: ng1_directive;\r\nuiStateDirective = [\r\n  '$uiRouter',\r\n  '$timeout',\r\n  function $StateRefDynamicDirective($uiRouter: UIRouter, $timeout: ITimeoutService) {\r\n    const $state = $uiRouter.stateService;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\r\n      link: function (scope: IScope, element: IAugmentedJQuery, attrs: any, uiSrefActive: any) {\r\n        const type = getTypeInfo(element);\r\n        const active = uiSrefActive[1] || uiSrefActive[0];\r\n        let unlinkInfoFn: Function = null;\r\n        let hookFn;\r\n\r\n        const rawDef = {} as Def;\r\n        const getDef = () => processedDef($state, element, rawDef);\r\n\r\n        const inputAttrs = ['uiState', 'uiStateParams', 'uiStateOpts'];\r\n        const watchDeregFns = inputAttrs.reduce((acc, attr) => ((acc[attr] = noop), acc), {});\r\n\r\n        function update() {\r\n          const def = getDef();\r\n          if (unlinkInfoFn) unlinkInfoFn();\r\n          if (active) unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\r\n          if (def.href != null) attrs.$set(type.attr, def.href);\r\n        }\r\n\r\n        inputAttrs.forEach((field) => {\r\n          rawDef[field] = attrs[field] ? scope.$eval(attrs[field]) : null;\r\n\r\n          attrs.$observe(field, (expr) => {\r\n            watchDeregFns[field]();\r\n            watchDeregFns[field] = scope.$watch(\r\n              expr,\r\n              (newval) => {\r\n                rawDef[field] = newval;\r\n                update();\r\n              },\r\n              true\r\n            );\r\n          });\r\n        });\r\n\r\n        update();\r\n\r\n        scope.$on('$destroy', <any>$uiRouter.stateRegistry.onStatesChanged(update));\r\n        scope.$on('$destroy', <any>$uiRouter.transitionService.onSuccess({}, update));\r\n\r\n        if (!type.clickable) return;\r\n        hookFn = clickHook(element, $state, $timeout, type, getDef);\r\n        bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\r\n      },\r\n    };\r\n  },\r\n];\r\n\r\n/**\r\n * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\r\n *\r\n * A directive working alongside [[uiSref]] and [[uiState]] to add classes to an element when the\r\n * related directive's state is active (and remove them when it is inactive).\r\n *\r\n * The primary use-case is to highlight the active link in navigation menus,\r\n * distinguishing it from the inactive menu items.\r\n *\r\n * ### Linking to a `ui-sref` or `ui-state`\r\n * `ui-sref-active` can live on the same element as `ui-sref`/`ui-state`, or it can be on a parent element.\r\n * If a `ui-sref-active` is a parent to more than one `ui-sref`/`ui-state`, it will apply the CSS class when **any of the links are active**.\r\n *\r\n * ### Matching\r\n *\r\n * The `ui-sref-active` directive applies the CSS class when the `ui-sref`/`ui-state`'s target state **or any child state is active**.\r\n * This is a \"fuzzy match\" which uses [[StateService.includes]].\r\n *\r\n * The `ui-sref-active-eq` directive applies the CSS class when the `ui-sref`/`ui-state`'s target state is directly active (not when child states are active).\r\n * This is an \"exact match\" which uses [[StateService.is]].\r\n *\r\n * ### Parameter values\r\n * If the `ui-sref`/`ui-state` includes parameter values, the current parameter values must match the link's values for the link to be highlighted.\r\n * This allows a list of links to the same state with different parameters to be rendered, and the correct one highlighted.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <li ng-repeat=\"user in users\" ui-sref-active=\"active\">\r\n *   <a ui-sref=\"user.details({ userId: user.id })\">{{ user.lastName }}</a>\r\n * </li>\r\n * ```\r\n *\r\n * ### Examples\r\n *\r\n * Given the following template:\r\n * #### Example:\r\n * ```html\r\n * <ul>\r\n *   <li ui-sref-active=\"active\" class=\"item\">\r\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\r\n *   </li>\r\n * </ul>\r\n * ```\r\n *\r\n * When the app state is `app.user` (or any child state),\r\n * and contains the state parameter \"user\" with value \"bilbobaggins\",\r\n * the resulting HTML will appear as (note the 'active' class):\r\n *\r\n * ```html\r\n * <ul>\r\n *   <li ui-sref-active=\"active\" class=\"item active\">\r\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\r\n *   </li>\r\n * </ul>\r\n * ```\r\n *\r\n * ### Glob mode\r\n *\r\n * It is possible to pass `ui-sref-active` an expression that evaluates to an object.\r\n * The objects keys represent active class names and values represent the respective state names/globs.\r\n * `ui-sref-active` will match if the current active state **includes** any of\r\n * the specified state names/globs, even the abstract ones.\r\n *\r\n * #### Example:\r\n * Given the following template, with \"admin\" being an abstract state:\r\n * ```html\r\n * <div ui-sref-active=\"{'active': 'admin.**'}\">\r\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\r\n * </div>\r\n * ```\r\n *\r\n * Arrays are also supported as values in the `ngClass`-like interface.\r\n * This allows multiple states to add `active` class.\r\n *\r\n * #### Example:\r\n * Given the following template, with \"admin.roles\" being the current state, the class will be added too:\r\n * ```html\r\n * <div ui-sref-active=\"{'active': ['owner.**', 'admin.**']}\">\r\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\r\n * </div>\r\n * ```\r\n *\r\n * When the current state is \"admin.roles\" the \"active\" class will be applied to both the `<div>` and `<a>` elements.\r\n * It is important to note that the state names/globs passed to `ui-sref-active` override any state provided by a linked `ui-sref`.\r\n *\r\n * ### Notes:\r\n *\r\n * - The class name is interpolated **once** during the directives link time (any further changes to the\r\n * interpolated value are ignored).\r\n *\r\n * - Multiple classes may be specified in a space-separated format: `ui-sref-active='class1 class2 class3'`\r\n */\r\nlet uiSrefActiveDirective: ng1_directive;\r\nuiSrefActiveDirective = [\r\n  '$state',\r\n  '$stateParams',\r\n  '$interpolate',\r\n  '$uiRouter',\r\n  function $StateRefActiveDirective(\r\n    $state: StateService,\r\n    $stateParams: Obj,\r\n    $interpolate: IInterpolateService,\r\n    $uiRouter: UIRouter\r\n  ) {\r\n    return {\r\n      restrict: 'A',\r\n      controller: [\r\n        '$scope',\r\n        '$element',\r\n        '$attrs',\r\n        function ($scope: IScope, $element: IAugmentedJQuery, $attrs: any) {\r\n          let states: StateData[] = [];\r\n          let activeEqClass: string;\r\n          let uiSrefActive: any;\r\n\r\n          // There probably isn't much point in $observing this\r\n          // uiSrefActive and uiSrefActiveEq share the same directive object with some\r\n          // slight difference in logic routing\r\n          activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\r\n\r\n          try {\r\n            uiSrefActive = $scope.$eval($attrs.uiSrefActive);\r\n          } catch (e) {\r\n            // Do nothing. uiSrefActive is not a valid expression.\r\n            // Fall back to using $interpolate below\r\n          }\r\n          uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\r\n          setStatesFromDefinitionObject(uiSrefActive);\r\n\r\n          // Allow uiSref to communicate with uiSrefActive[Equals]\r\n          this.$$addStateInfo = function (newState: string, newParams: Obj) {\r\n            // we already got an explicit state provided by ui-sref-active, so we\r\n            // shadow the one that comes from ui-sref\r\n            if (isObject(uiSrefActive) && states.length > 0) {\r\n              return;\r\n            }\r\n            const deregister = addState(newState, newParams, uiSrefActive);\r\n            update();\r\n            return deregister;\r\n          };\r\n\r\n          function updateAfterTransition(trans) {\r\n            trans.promise.then(update, noop);\r\n          }\r\n          $scope.$on('$destroy', setupEventListeners());\r\n          if ($uiRouter.globals.transition) {\r\n            updateAfterTransition($uiRouter.globals.transition);\r\n          }\r\n\r\n          function setupEventListeners() {\r\n            const deregisterStatesChangedListener = $uiRouter.stateRegistry.onStatesChanged(handleStatesChanged);\r\n            const deregisterOnStartListener = $uiRouter.transitionService.onStart({}, updateAfterTransition);\r\n            const deregisterStateChangeSuccessListener = $scope.$on('$stateChangeSuccess', update);\r\n            return function cleanUp() {\r\n              deregisterStatesChangedListener();\r\n              deregisterOnStartListener();\r\n              deregisterStateChangeSuccessListener();\r\n            };\r\n          }\r\n\r\n          function handleStatesChanged() {\r\n            setStatesFromDefinitionObject(uiSrefActive);\r\n          }\r\n\r\n          function setStatesFromDefinitionObject(statesDefinition: Obj) {\r\n            if (isObject(statesDefinition)) {\r\n              states = [];\r\n              forEach(statesDefinition, function (stateOrName: StateOrName | Array<StateOrName>, activeClass: string) {\r\n                // Helper function to abstract adding state.\r\n                const addStateForClass = function (stateOrName: string, activeClass: string) {\r\n                  const ref = parseStateRef(stateOrName);\r\n                  addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\r\n                };\r\n\r\n                if (isString(stateOrName)) {\r\n                  // If state is string, just add it.\r\n                  addStateForClass(stateOrName as string, activeClass);\r\n                } else if (isArray(stateOrName)) {\r\n                  // If state is an array, iterate over it and add each array item individually.\r\n                  forEach(stateOrName, function (stateOrName: string) {\r\n                    addStateForClass(stateOrName, activeClass);\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          }\r\n\r\n          function addState(stateName: string, stateParams: Obj, activeClass: string) {\r\n            const state = $state.get(stateName, stateContext($element));\r\n\r\n            const stateInfo = {\r\n              state: state || { name: stateName },\r\n              params: stateParams,\r\n              activeClass: activeClass,\r\n            };\r\n\r\n            states.push(stateInfo);\r\n\r\n            return function removeState() {\r\n              removeFrom(states)(stateInfo);\r\n            };\r\n          }\r\n\r\n          // Update route state\r\n          function update() {\r\n            const splitClasses = (str) => str.split(/\\s/).filter(identity);\r\n            const getClasses = (stateList: StateData[]) =>\r\n              stateList\r\n                .map((x) => x.activeClass)\r\n                .map(splitClasses)\r\n                .reduce(unnestR, []);\r\n\r\n            const allClasses = getClasses(states).concat(splitClasses(activeEqClass)).reduce(uniqR, []);\r\n            const fuzzyClasses = getClasses(states.filter((x) => $state.includes(x.state.name, x.params)));\r\n            const exactlyMatchesAny = !!states.filter((x) => $state.is(x.state.name, x.params)).length;\r\n            const exactClasses = exactlyMatchesAny ? splitClasses(activeEqClass) : [];\r\n\r\n            const addClasses = fuzzyClasses.concat(exactClasses).reduce(uniqR, []);\r\n            const removeClasses = allClasses.filter((cls) => !inArray(addClasses, cls));\r\n\r\n            $scope.$evalAsync(() => {\r\n              addClasses.forEach((className) => $element.addClass(className));\r\n              removeClasses.forEach((className) => $element.removeClass(className));\r\n            });\r\n          }\r\n\r\n          update();\r\n        },\r\n      ],\r\n    };\r\n  },\r\n];\r\n\r\n/** @hidden */\r\ninterface Def {\r\n  uiState: string;\r\n  href: string;\r\n  uiStateParams: Obj;\r\n  uiStateOpts: any;\r\n}\r\n/** @hidden */\r\ninterface StateData {\r\n  state: StateDeclaration;\r\n  params: RawParams;\r\n  activeClass: string;\r\n}\r\n\r\nangular\r\n  .module('ui.router.state')\r\n  .directive('uiSref', uiSrefDirective)\r\n  .directive('uiSrefActive', uiSrefActiveDirective)\r\n  .directive('uiSrefActiveEq', uiSrefActiveDirective)\r\n  .directive('uiState', uiStateDirective);\r\n",
    "/** @publicapi @module directives */ /** */\r\nimport {\r\n  $QLike,\r\n  ActiveUIView,\r\n  extend,\r\n  filter,\r\n  HookRegOptions,\r\n  isDefined,\r\n  isFunction,\r\n  isString,\r\n  kebobString,\r\n  noop,\r\n  Obj,\r\n  Param,\r\n  parse,\r\n  PathNode,\r\n  ResolveContext,\r\n  StateDeclaration,\r\n  tail,\r\n  trace,\r\n  Transition,\r\n  TransitionService,\r\n  TypedMap,\r\n  unnestR,\r\n  ViewService,\r\n} from '@uirouter/core';\r\nimport { IAugmentedJQuery, IInterpolateService, IScope, ITranscludeFunction } from 'angular';\r\nimport { ng as angular } from '../angular';\r\nimport { Ng1Controller, Ng1StateDeclaration } from '../interface';\r\nimport { getLocals } from '../services';\r\nimport { Ng1ViewConfig } from '../statebuilders/views';\r\nimport { ng1_directive } from './stateDirectives';\r\n\r\n/** @hidden */\r\nexport type UIViewData = {\r\n  $cfg: Ng1ViewConfig;\r\n  $uiView: ActiveUIView;\r\n};\r\n\r\n/** @hidden */\r\nexport type UIViewAnimData = {\r\n  $animEnter: Promise<any>;\r\n  $animLeave: Promise<any>;\r\n  $$animLeave: { resolve: () => any }; // \"deferred\"\r\n};\r\n\r\n/**\r\n * `ui-view`: A viewport directive which is filled in by a view from the active state.\r\n *\r\n * ### Attributes\r\n *\r\n * - `name`: (Optional) A view name.\r\n *   The name should be unique amongst the other views in the same state.\r\n *   You can have views of the same name that live in different states.\r\n *   The ui-view can be targeted in a View using the name ([[Ng1StateDeclaration.views]]).\r\n *\r\n * - `autoscroll`: an expression. When it evaluates to true, the `ui-view` will be scrolled into view when it is activated.\r\n *   Uses [[$uiViewScroll]] to do the scrolling.\r\n *\r\n * - `onload`: Expression to evaluate whenever the view updates.\r\n *\r\n * #### Example:\r\n * A view can be unnamed or named.\r\n * ```html\r\n * <!-- Unnamed -->\r\n * <div ui-view></div>\r\n *\r\n * <!-- Named -->\r\n * <div ui-view=\"viewName\"></div>\r\n *\r\n * <!-- Named (different style) -->\r\n * <ui-view name=\"viewName\"></ui-view>\r\n * ```\r\n *\r\n * You can only have one unnamed view within any template (or root html). If you are only using a\r\n * single view and it is unnamed then you can populate it like so:\r\n *\r\n * ```html\r\n * <div ui-view></div>\r\n * $stateProvider.state(\"home\", {\r\n *   template: \"<h1>HELLO!</h1>\"\r\n * })\r\n * ```\r\n *\r\n * The above is a convenient shortcut equivalent to specifying your view explicitly with the\r\n * [[Ng1StateDeclaration.views]] config property, by name, in this case an empty name:\r\n *\r\n * ```js\r\n * $stateProvider.state(\"home\", {\r\n *   views: {\r\n *     \"\": {\r\n *       template: \"<h1>HELLO!</h1>\"\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * But typically you'll only use the views property if you name your view or have more than one view\r\n * in the same template. There's not really a compelling reason to name a view if its the only one,\r\n * but you could if you wanted, like so:\r\n *\r\n * ```html\r\n * <div ui-view=\"main\"></div>\r\n * ```\r\n *\r\n * ```js\r\n * $stateProvider.state(\"home\", {\r\n *   views: {\r\n *     \"main\": {\r\n *       template: \"<h1>HELLO!</h1>\"\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * Really though, you'll use views to set up multiple views:\r\n *\r\n * ```html\r\n * <div ui-view></div>\r\n * <div ui-view=\"chart\"></div>\r\n * <div ui-view=\"data\"></div>\r\n * ```\r\n *\r\n * ```js\r\n * $stateProvider.state(\"home\", {\r\n *   views: {\r\n *     \"\": {\r\n *       template: \"<h1>HELLO!</h1>\"\r\n *     },\r\n *     \"chart\": {\r\n *       template: \"<chart_thing/>\"\r\n *     },\r\n *     \"data\": {\r\n *       template: \"<data_thing/>\"\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * #### Examples for `autoscroll`:\r\n * ```html\r\n * <!-- If autoscroll present with no expression,\r\n *      then scroll ui-view into view -->\r\n * <ui-view autoscroll/>\r\n *\r\n * <!-- If autoscroll present with valid expression,\r\n *      then scroll ui-view into view if expression evaluates to true -->\r\n * <ui-view autoscroll='true'/>\r\n * <ui-view autoscroll='false'/>\r\n * <ui-view autoscroll='scopeVariable'/>\r\n * ```\r\n *\r\n * Resolve data:\r\n *\r\n * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\r\n * can be customized using [[Ng1ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\r\n *\r\n * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\r\n * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\r\n * depends on `$resolve` data.\r\n *\r\n * #### Example:\r\n * ```js\r\n * $stateProvider.state('home', {\r\n *   template: '<my-component user=\"$resolve.user\"></my-component>',\r\n *   resolve: {\r\n *     user: function(UserService) { return UserService.fetchUser(); }\r\n *   }\r\n * });\r\n * ```\r\n */\r\nexport let uiView: ng1_directive;\r\n// eslint-disable-next-line prefer-const\r\nuiView = [\r\n  '$view',\r\n  '$animate',\r\n  '$uiViewScroll',\r\n  '$interpolate',\r\n  '$q',\r\n  function $ViewDirective(\r\n    $view: ViewService,\r\n    $animate: any,\r\n    $uiViewScroll: any,\r\n    $interpolate: IInterpolateService,\r\n    $q: $QLike\r\n  ) {\r\n    function getRenderer() {\r\n      return {\r\n        enter: function (element: JQuery, target: any, cb: Function) {\r\n          if (angular.version.minor > 2) {\r\n            $animate.enter(element, null, target).then(cb);\r\n          } else {\r\n            $animate.enter(element, null, target, cb);\r\n          }\r\n        },\r\n        leave: function (element: JQuery, cb: Function) {\r\n          if (angular.version.minor > 2) {\r\n            $animate.leave(element).then(cb);\r\n          } else {\r\n            $animate.leave(element, cb);\r\n          }\r\n        },\r\n      };\r\n    }\r\n\r\n    function configsEqual(config1: Ng1ViewConfig, config2: Ng1ViewConfig) {\r\n      return config1 === config2;\r\n    }\r\n\r\n    const rootData = {\r\n      $cfg: { viewDecl: { $context: $view._pluginapi._rootViewContext() } },\r\n      $uiView: {},\r\n    };\r\n\r\n    const directive = {\r\n      count: 0,\r\n      restrict: 'ECA',\r\n      terminal: true,\r\n      priority: 400,\r\n      transclude: 'element',\r\n      compile: function (tElement: JQuery, tAttrs: Obj, $transclude: ITranscludeFunction) {\r\n        return function (scope: IScope, $element: IAugmentedJQuery, attrs: Obj) {\r\n          const onloadExp = attrs['onload'] || '',\r\n            autoScrollExp = attrs['autoscroll'],\r\n            renderer = getRenderer(),\r\n            inherited = $element.inheritedData('$uiView') || rootData,\r\n            name = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';\r\n\r\n          let previousEl: JQuery, currentEl: JQuery, currentScope: IScope, viewConfig: Ng1ViewConfig;\r\n\r\n          const activeUIView: ActiveUIView = {\r\n            $type: 'ng1',\r\n            id: directive.count++, // Global sequential ID for ui-view tags added to DOM\r\n            name: name, // ui-view name (<div ui-view=\"name\"></div>\r\n            fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + '.' + name : name, // fully qualified name, describes location in DOM\r\n            config: null, // The ViewConfig loaded (from a state.views definition)\r\n            configUpdated: configUpdatedCallback, // Called when the matching ViewConfig changes\r\n            get creationContext() {\r\n              // The context in which this ui-view \"tag\" was created\r\n              const fromParentTagConfig = parse('$cfg.viewDecl.$context')(inherited);\r\n              // Allow <ui-view name=\"foo\"><ui-view name=\"bar\"></ui-view></ui-view>\r\n              // See https://github.com/angular-ui/ui-router/issues/3355\r\n              const fromParentTag = parse('$uiView.creationContext')(inherited);\r\n              return fromParentTagConfig || fromParentTag;\r\n            },\r\n          };\r\n\r\n          trace.traceUIViewEvent('Linking', activeUIView);\r\n\r\n          function configUpdatedCallback(config?: Ng1ViewConfig) {\r\n            if (config && !(config instanceof Ng1ViewConfig)) return;\r\n            if (configsEqual(viewConfig, config)) return;\r\n            trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\r\n\r\n            viewConfig = config;\r\n            updateView(config);\r\n          }\r\n\r\n          $element.data('$uiView', { $uiView: activeUIView });\r\n\r\n          updateView();\r\n\r\n          const unregister = $view.registerUIView(activeUIView);\r\n          scope.$on('$destroy', function () {\r\n            trace.traceUIViewEvent('Destroying/Unregistering', activeUIView);\r\n            unregister();\r\n          });\r\n\r\n          function cleanupLastView() {\r\n            if (previousEl) {\r\n              trace.traceUIViewEvent('Removing (previous) el', previousEl.data('$uiView'));\r\n              previousEl.remove();\r\n              previousEl = null;\r\n            }\r\n\r\n            if (currentScope) {\r\n              trace.traceUIViewEvent('Destroying scope', activeUIView);\r\n              currentScope.$destroy();\r\n              currentScope = null;\r\n            }\r\n\r\n            if (currentEl) {\r\n              const _viewData = currentEl.data('$uiViewAnim');\r\n              trace.traceUIViewEvent('Animate out', _viewData);\r\n              renderer.leave(currentEl, function () {\r\n                _viewData.$$animLeave.resolve();\r\n                previousEl = null;\r\n              });\r\n\r\n              previousEl = currentEl;\r\n              currentEl = null;\r\n            }\r\n          }\r\n\r\n          function updateView(config?: Ng1ViewConfig) {\r\n            const newScope = scope.$new();\r\n            const animEnter = $q.defer(),\r\n              animLeave = $q.defer();\r\n\r\n            const $uiViewData: UIViewData = {\r\n              $cfg: config,\r\n              $uiView: activeUIView,\r\n            };\r\n\r\n            const $uiViewAnim: UIViewAnimData = {\r\n              $animEnter: animEnter.promise,\r\n              $animLeave: animLeave.promise,\r\n              $$animLeave: animLeave,\r\n            };\r\n\r\n            /**\r\n             * @ngdoc event\r\n             * @name ui.router.state.directive:ui-view#$viewContentLoading\r\n             * @eventOf ui.router.state.directive:ui-view\r\n             * @eventType emits on ui-view directive scope\r\n             * @description\r\n             *\r\n             * Fired once the view **begins loading**, *before* the DOM is rendered.\r\n             *\r\n             * @param {Object} event Event object.\r\n             * @param {string} viewName Name of the view.\r\n             */\r\n            newScope.$emit('$viewContentLoading', name);\r\n\r\n            const cloned = $transclude(newScope, function (clone) {\r\n              clone.data('$uiViewAnim', $uiViewAnim);\r\n              clone.data('$uiView', $uiViewData);\r\n              renderer.enter(clone, $element, function onUIViewEnter() {\r\n                animEnter.resolve();\r\n                if (currentScope) currentScope.$emit('$viewContentAnimationEnded');\r\n\r\n                if ((isDefined(autoScrollExp) && !autoScrollExp) || scope.$eval(autoScrollExp)) {\r\n                  $uiViewScroll(clone);\r\n                }\r\n              });\r\n\r\n              cleanupLastView();\r\n            });\r\n\r\n            currentEl = cloned;\r\n            currentScope = newScope;\r\n            /**\r\n             * @ngdoc event\r\n             * @name ui.router.state.directive:ui-view#$viewContentLoaded\r\n             * @eventOf ui.router.state.directive:ui-view\r\n             * @eventType emits on ui-view directive scope\r\n             * @description           *\r\n             * Fired once the view is **loaded**, *after* the DOM is rendered.\r\n             *\r\n             * @param {Object} event Event object.\r\n             */\r\n            currentScope.$emit('$viewContentLoaded', config || viewConfig);\r\n            currentScope.$eval(onloadExp);\r\n          }\r\n        };\r\n      },\r\n    };\r\n\r\n    return directive;\r\n  },\r\n];\r\n\r\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$q'];\r\n\r\n/** @hidden */\r\nfunction $ViewDirectiveFill(\r\n  $compile: angular.ICompileService,\r\n  $controller: angular.IControllerService,\r\n  $transitions: TransitionService,\r\n  $view: ViewService,\r\n  $q: angular.IQService\r\n) {\r\n  const getControllerAs = parse('viewDecl.controllerAs');\r\n  const getResolveAs = parse('viewDecl.resolveAs');\r\n\r\n  return {\r\n    restrict: 'ECA',\r\n    priority: -400,\r\n    compile: function (tElement: JQuery) {\r\n      const initial = tElement.html();\r\n      tElement.empty();\r\n\r\n      return function (scope: IScope, $element: JQuery) {\r\n        const data: UIViewData = $element.data('$uiView');\r\n        if (!data) {\r\n          $element.html(initial);\r\n          $compile($element.contents() as any)(scope);\r\n          return;\r\n        }\r\n\r\n        const cfg: Ng1ViewConfig = data.$cfg || <any>{ viewDecl: {}, getTemplate: noop };\r\n        const resolveCtx: ResolveContext = cfg.path && new ResolveContext(cfg.path);\r\n        $element.html(cfg.getTemplate($element, resolveCtx) || initial);\r\n        trace.traceUIViewFill(data.$uiView, $element.html());\r\n\r\n        const link = $compile($element.contents() as any);\r\n        const controller = cfg.controller as angular.IControllerService;\r\n        const controllerAs: string = getControllerAs(cfg);\r\n        const resolveAs: string = getResolveAs(cfg);\r\n        const locals = resolveCtx && getLocals(resolveCtx);\r\n\r\n        scope[resolveAs] = locals;\r\n\r\n        if (controller) {\r\n          const controllerInstance = <Ng1Controller>(\r\n            $controller(controller, extend({}, locals, { $scope: scope, $element: $element }))\r\n          );\r\n          if (controllerAs) {\r\n            scope[controllerAs] = controllerInstance;\r\n            scope[controllerAs][resolveAs] = locals;\r\n          }\r\n\r\n          // TODO: Use $view service as a central point for registering component-level hooks\r\n          // Then, when a component is created, tell the $view service, so it can invoke hooks\r\n          // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\r\n          // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\r\n\r\n          $element.data('$ngControllerController', controllerInstance);\r\n          $element.children().data('$ngControllerController', controllerInstance);\r\n\r\n          registerControllerCallbacks($q, $transitions, controllerInstance, scope, cfg);\r\n        }\r\n\r\n        // Wait for the component to appear in the DOM\r\n        if (isString(cfg.component)) {\r\n          const kebobName = kebobString(cfg.component);\r\n          const tagRegexp = new RegExp(`^(x-|data-)?${kebobName}$`, 'i');\r\n\r\n          const getComponentController = () => {\r\n            const directiveEl = [].slice\r\n              .call($element[0].children)\r\n              .filter((el: Element) => el && el.tagName && tagRegexp.exec(el.tagName));\r\n\r\n            return directiveEl && angular.element(directiveEl).data(`$${cfg.component}Controller`);\r\n          };\r\n\r\n          const deregisterWatch = scope.$watch(getComponentController, function (ctrlInstance) {\r\n            if (!ctrlInstance) return;\r\n            registerControllerCallbacks($q, $transitions, ctrlInstance, scope, cfg);\r\n            deregisterWatch();\r\n          });\r\n        }\r\n\r\n        link(scope);\r\n      };\r\n    },\r\n  };\r\n}\r\n\r\n/** @hidden */\r\nconst hasComponentImpl = typeof (angular as any).module('ui.router')['component'] === 'function';\r\n/** @hidden incrementing id */\r\nlet _uiCanExitId = 0;\r\n\r\n/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\r\nfunction registerControllerCallbacks(\r\n  $q: angular.IQService,\r\n  $transitions: TransitionService,\r\n  controllerInstance: Ng1Controller,\r\n  $scope: IScope,\r\n  cfg: Ng1ViewConfig\r\n) {\r\n  // Call $onInit() ASAP\r\n  if (\r\n    isFunction(controllerInstance.$onInit) &&\r\n    !((cfg.viewDecl.component || cfg.viewDecl.componentProvider) && hasComponentImpl)\r\n  ) {\r\n    controllerInstance.$onInit();\r\n  }\r\n\r\n  const viewState: Ng1StateDeclaration = tail(cfg.path).state.self;\r\n\r\n  const hookOptions: HookRegOptions = { bind: controllerInstance };\r\n  // Add component-level hook for onUiParamsChanged\r\n  if (isFunction(controllerInstance.uiOnParamsChanged)) {\r\n    const resolveContext: ResolveContext = new ResolveContext(cfg.path);\r\n    const viewCreationTrans = resolveContext.getResolvable('$transition$').data;\r\n\r\n    // Fire callback on any successful transition\r\n    const paramsUpdated = ($transition$: Transition) => {\r\n      // Exit early if the $transition$ is the same as the view was created within.\r\n      // Exit early if the $transition$ will exit the state the view is for.\r\n      if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(viewState as StateDeclaration) !== -1)\r\n        return;\r\n\r\n      const toParams = $transition$.params('to') as TypedMap<any>;\r\n      const fromParams = $transition$.params<TypedMap<any>>('from') as TypedMap<any>;\r\n      const getNodeSchema = (node: PathNode) => node.paramSchema;\r\n      const toSchema: Param[] = $transition$.treeChanges('to').map(getNodeSchema).reduce(unnestR, []);\r\n      const fromSchema: Param[] = $transition$.treeChanges('from').map(getNodeSchema).reduce(unnestR, []);\r\n\r\n      // Find the to params that have different values than the from params\r\n      const changedToParams = toSchema.filter((param: Param) => {\r\n        const idx = fromSchema.indexOf(param);\r\n        return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\r\n      });\r\n\r\n      // Only trigger callback if a to param has changed or is new\r\n      if (changedToParams.length) {\r\n        const changedKeys: string[] = changedToParams.map((x) => x.id);\r\n        // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\r\n        const newValues = filter(toParams, (val, key) => changedKeys.indexOf(key) !== -1);\r\n        controllerInstance.uiOnParamsChanged(newValues, $transition$);\r\n      }\r\n    };\r\n    $scope.$on('$destroy', <any>$transitions.onSuccess({}, paramsUpdated, hookOptions));\r\n  }\r\n\r\n  // Add component-level hook for uiCanExit\r\n  if (isFunction(controllerInstance.uiCanExit)) {\r\n    const id = _uiCanExitId++;\r\n    const cacheProp = '_uiCanExitIds';\r\n\r\n    // Returns true if a redirect transition already answered truthy\r\n    const prevTruthyAnswer = (trans: Transition) =>\r\n      !!trans && ((trans[cacheProp] && trans[cacheProp][id] === true) || prevTruthyAnswer(trans.redirectedFrom()));\r\n\r\n    // If a user answered yes, but the transition was later redirected, don't also ask for the new redirect transition\r\n    const wrappedHook = (trans: Transition) => {\r\n      let promise;\r\n      const ids = (trans[cacheProp] = trans[cacheProp] || {});\r\n\r\n      if (!prevTruthyAnswer(trans)) {\r\n        promise = $q.when(controllerInstance.uiCanExit(trans));\r\n        promise.then((val) => (ids[id] = val !== false));\r\n      }\r\n      return promise;\r\n    };\r\n\r\n    const criteria = { exiting: viewState.name };\r\n    $scope.$on('$destroy', <any>$transitions.onBefore(criteria, wrappedHook, hookOptions));\r\n  }\r\n}\r\n\r\nangular.module('ui.router.state').directive('uiView', <any>uiView);\r\nangular.module('ui.router.state').directive('uiView', <any>$ViewDirectiveFill);\r\n",
    "/** @publicapi @module ng1 */ /** */\r\n\r\nimport { ng as angular } from './angular';\r\nimport { Obj, StateService, StateOrName } from '@uirouter/core';\r\n\r\n/**\r\n * `isState` Filter: truthy if the current state is the parameter\r\n *\r\n * Translates to [[StateService.is]] `$state.is(\"stateName\")`.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <div ng-if=\"'stateName' | isState\">show if state is 'stateName'</div>\r\n * ```\r\n */\r\n$IsStateFilter.$inject = ['$state'];\r\nfunction $IsStateFilter($state: StateService) {\r\n  const isFilter: any = function (state: StateOrName, params: Obj, options?: { relative?: StateOrName }) {\r\n    return $state.is(state, params, options);\r\n  };\r\n  isFilter.$stateful = true;\r\n  return isFilter;\r\n}\r\n\r\n/**\r\n * `includedByState` Filter: truthy if the current state includes the parameter\r\n *\r\n * Translates to [[StateService.includes]]` $state.is(\"fullOrPartialStateName\")`.\r\n *\r\n * #### Example:\r\n * ```html\r\n * <div ng-if=\"'fullOrPartialStateName' | includedByState\">show if state includes 'fullOrPartialStateName'</div>\r\n * ```\r\n */\r\n$IncludedByStateFilter.$inject = ['$state'];\r\nfunction $IncludedByStateFilter($state: StateService) {\r\n  const includesFilter: any = function (state: StateOrName, params: Obj, options: { relative?: StateOrName }) {\r\n    return $state.includes(state, params, options);\r\n  };\r\n  includesFilter.$stateful = true;\r\n  return includesFilter;\r\n}\r\n\r\nangular.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);\r\n\r\nexport { $IsStateFilter, $IncludedByStateFilter };\r\n",
    "/** @publicapi @module ng1 */ /** */\r\nimport { ng as angular } from './angular';\r\nimport { IServiceProviderFactory } from 'angular';\r\nimport IAnchorScrollService = angular.IAnchorScrollService;\r\nimport ITimeoutService = angular.ITimeoutService;\r\n\r\nexport interface UIViewScrollProvider {\r\n  /**\r\n   * Uses standard anchorScroll behavior\r\n   *\r\n   * Reverts [[$uiViewScroll]] back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\r\n   * service for scrolling based on the url anchor.\r\n   */\r\n  useAnchorScroll(): void;\r\n}\r\n\r\n/** @hidden */\r\nfunction $ViewScrollProvider() {\r\n  let useAnchorScroll = false;\r\n\r\n  this.useAnchorScroll = function () {\r\n    useAnchorScroll = true;\r\n  };\r\n\r\n  this.$get = [\r\n    '$anchorScroll',\r\n    '$timeout',\r\n    function ($anchorScroll: IAnchorScrollService, $timeout: ITimeoutService): Function {\r\n      if (useAnchorScroll) {\r\n        return $anchorScroll;\r\n      }\r\n\r\n      return function ($element: JQuery) {\r\n        return $timeout(\r\n          function () {\r\n            $element[0].scrollIntoView();\r\n          },\r\n          0,\r\n          false\r\n        );\r\n      };\r\n    },\r\n  ];\r\n}\r\n\r\nangular.module('ui.router.state').provider('$uiViewScroll', <IServiceProviderFactory>$ViewScrollProvider);\r\n",
    "/**\r\n * Main entry point for angular 1.x build\r\n * @publicapi @module ng1\r\n */ /** */\r\nexport * from './interface';\r\nexport * from './services';\r\nexport * from './statebuilders/views';\r\nexport * from './stateProvider';\r\nexport * from './urlRouterProvider';\r\n\r\nimport './injectables';\r\nimport './directives/stateDirectives';\r\nimport './stateFilters';\r\nimport './directives/viewDirective';\r\nimport './viewScroll';\r\n\r\nexport default 'ui.router';\r\n\r\nimport * as core from '@uirouter/core';\r\nexport { core };\r\nexport * from '@uirouter/core';\r\n"
  ],
  "names": [
    "ng_from_global",
    "angular",
    "ng",
    "ng_from_import",
    "ng_from_import.module",
    "getNg1ViewConfigFactory",
    "templateFactory",
    "path",
    "view",
    "services",
    "$injector",
    "get",
    "Ng1ViewConfig",
    "hasAnyKey",
    "keys",
    "obj",
    "reduce",
    "acc",
    "key",
    "isDefined",
    "ng1ViewsBuilder",
    "state",
    "parent",
    "compKeys",
    "nonCompKeys",
    "concat",
    "allViewKeys",
    "views",
    "Error",
    "name",
    "filter",
    "join",
    "viewsObject",
    "$default",
    "pick",
    "forEach",
    "config",
    "isString",
    "component",
    "extend",
    "resolveAs",
    "$type",
    "$context",
    "$name",
    "normalized",
    "ViewService",
    "normalizeUIViewTarget",
    "$uiViewName",
    "uiViewName",
    "$uiViewContextAnchor",
    "uiViewContextAnchor",
    "id",
    "viewDecl",
    "factory",
    "this",
    "uiView",
    "context",
    "_this",
    "makeComponentTemplate",
    "bindings",
    "template",
    "$q",
    "ResolveContext",
    "params",
    "node",
    "paramValues",
    "promises",
    "when",
    "fromConfig",
    "controller",
    "getController",
    "all",
    "then",
    "results",
    "trace",
    "traceViewServiceEvent",
    "provider",
    "controllerProvider",
    "isInjectable",
    "deps",
    "annotate",
    "providerFn",
    "isArray",
    "tail",
    "Resolvable",
    "version",
    "minor",
    "$http",
    "$templateCache",
    "$templateRequest",
    "has",
    "TemplateFactory",
    "value",
    "_useHttp",
    "asTemplate",
    "result",
    "str",
    "asComponent",
    "fromString",
    "templateUrl",
    "fromUrl",
    "templateProvider",
    "fromProvider",
    "componentProvider",
    "fromComponentProvider",
    "isFunction",
    "url",
    "cache",
    "headers",
    "Accept",
    "response",
    "data",
    "prefix",
    "kebob",
    "camelCase",
    "kebobed",
    "kebobString",
    "exec",
    "attrs",
    "cmpDefs",
    "length",
    "map",
    "getBindings",
    "unnestR",
    "getComponentBindings",
    "input",
    "type",
    "attrName",
    "attr",
    "resolveName",
    "res",
    "getResolvable",
    "fn",
    "args",
    "kebobName",
    "def",
    "isObject",
    "bindToController",
    "scopeBindings",
    "scope",
    "bindingsObj",
    "Object",
    "tuple",
    "stateRegistry",
    "stateService",
    "createProxyFunctions",
    "val",
    "StateProvider",
    "prototype",
    "func",
    "decorator",
    "definition",
    "register",
    "callback",
    "onInvalid",
    "getStateHookBuilder",
    "hookName",
    "stateObject",
    "hook",
    "pathname",
    "trans",
    "subContext",
    "treeChanges",
    "$$state",
    "locals",
    "getLocals",
    "$state$",
    "$transition$",
    "invoke",
    "undefined",
    "$locationProvider",
    "_lp",
    "Ng1LocationServices",
    "router",
    "pathType",
    "urlMatcherFactory",
    "encode",
    "x",
    "toString",
    "replace",
    "m",
    "~",
    "/",
    "decode",
    "~~",
    "~2F",
    "_urlListeners",
    "push",
    "removeFrom",
    "html5Mode",
    "enabled",
    "$sniffer",
    "history",
    "_baseHref",
    "$browser",
    "baseHref",
    "$window",
    "location",
    "newUrl",
    "$location",
    "$rootScope",
    "$on",
    "evt",
    "_loc",
    "UrlRouterProvider",
    "handler",
    "match",
    "$match",
    "$stateParams",
    "globals",
    "urlService",
    "urlRouter",
    "update",
    "interceptDeferred",
    "listen",
    "ruleFn",
    "rule",
    "BaseUrlRule",
    "locationService",
    "identity",
    "rules",
    "urlRules",
    "otherwise",
    "what",
    "injectableHandler",
    "defer",
    "deferIntercept",
    "module",
    "mod_init",
    "mod_util",
    "mod_rtr",
    "mod_state",
    "mod_main",
    "$uiRouterProvider",
    "UIRouter",
    "stateProvider",
    "viewService",
    "_pluginapi",
    "_viewConfigFactory",
    "_decodeParams",
    "ng1LocationService",
    "locationConfig",
    "$get",
    "_runtimeServices",
    "monkeyPatchPathParameterType",
    "$inject",
    "getProviderFor",
    "serviceName",
    "$urp",
    "service",
    "runBlock",
    "$uiRouter",
    "hasOwnProperty",
    "call",
    "checkStrictDi",
    "error",
    "strictDi",
    "resolvables",
    "resolvable",
    "resolveFn",
    "watchDigests",
    "$watch",
    "approximateDigests",
    "uiRouter",
    "urlRouterProvider",
    "run",
    "$urlMatcherFactory",
    "$state",
    "$urlRouter",
    "uiSrefDirective",
    "uiStateDirective",
    "uiSrefActiveDirective",
    "ctx",
    "getTokens",
    "getPolicy",
    "async",
    "promise",
    "applyPairs",
    "parseStateRef",
    "ref",
    "paramsOnly",
    "parsed",
    "paramExpr",
    "stateContext",
    "el",
    "$uiView",
    "inheritedData",
    "parse",
    "processedDef",
    "$element",
    "uiState",
    "current",
    "uiStateOpts",
    "relative",
    "$current",
    "inherit",
    "source",
    "defaultOpts",
    "href",
    "uiStateParams",
    "getTypeInfo",
    "isSvg",
    "prop",
    "isForm",
    "nodeName",
    "isAnchor",
    "toUpperCase",
    "clickable",
    "clickHook",
    "$timeout",
    "getDef",
    "e",
    "button",
    "which",
    "target",
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "altKey",
    "transition_1",
    "go",
    "preventDefault",
    "ignorePreventDefaultCount_1",
    "cancel",
    "bindEvents",
    "element",
    "hookFn",
    "events",
    "on",
    "events_1",
    "_i",
    "event_1",
    "off",
    "events_2",
    "event_2",
    "$IsStateFilter",
    "isFilter",
    "options",
    "is",
    "$stateful",
    "$IncludedByStateFilter",
    "includesFilter",
    "includes",
    "$ViewDirectiveFill",
    "$compile",
    "$controller",
    "$transitions",
    "$view",
    "getControllerAs",
    "getResolveAs",
    "restrict",
    "priority",
    "compile",
    "tElement",
    "initial",
    "html",
    "empty",
    "contents",
    "cfg",
    "$cfg",
    "getTemplate",
    "noop",
    "resolveCtx",
    "traceUIViewFill",
    "link",
    "controllerAs",
    "controllerInstance",
    "$scope",
    "children",
    "registerControllerCallbacks",
    "tagRegexp_1",
    "RegExp",
    "deregisterWatch_1",
    "directiveEl",
    "slice",
    "tagName",
    "ctrlInstance",
    "require",
    "uiSrefActive",
    "active",
    "unlinkInfoFn",
    "rawDef",
    "uiSref",
    "$$addStateInfo",
    "$set",
    "uiSrefOpts",
    "$eval",
    "onStatesChanged",
    "transitionService",
    "onSuccess",
    "inputAttrs",
    "watchDeregFns",
    "field",
    "$observe",
    "expr",
    "newval",
    "$interpolate",
    "$attrs",
    "activeEqClass",
    "deregisterStatesChangedListener",
    "deregisterOnStartListener",
    "deregisterStateChangeSuccessListener",
    "states",
    "uiSrefActiveEq",
    "updateAfterTransition",
    "handleStatesChanged",
    "setStatesFromDefinitionObject",
    "statesDefinition",
    "stateOrName",
    "activeClass",
    "addStateForClass",
    "addState",
    "stateName",
    "stateParams",
    "stateInfo",
    "splitClasses",
    "split",
    "getClasses",
    "stateList",
    "allClasses",
    "uniqR",
    "fuzzyClasses",
    "exactClasses",
    "addClasses",
    "removeClasses",
    "cls",
    "inArray",
    "$evalAsync",
    "className",
    "addClass",
    "removeClass",
    "newState",
    "newParams",
    "deregister",
    "onStart",
    "transition",
    "directive",
    "$animate",
    "$uiViewScroll",
    "rootData",
    "_rootViewContext",
    "count",
    "terminal",
    "transclude",
    "tAttrs",
    "$transclude",
    "previousEl",
    "currentEl",
    "currentScope",
    "viewConfig",
    "onloadExp",
    "autoScrollExp",
    "renderer",
    "enter",
    "cb",
    "leave",
    "inherited",
    "activeUIView",
    "fqn",
    "configUpdated",
    "config1",
    "config2",
    "traceUIViewConfigUpdated",
    "updateView",
    "creationContext",
    "fromParentTagConfig",
    "fromParentTag",
    "traceUIViewEvent",
    "unregister",
    "registerUIView",
    "newScope",
    "$new",
    "animEnter",
    "animLeave",
    "$uiViewData",
    "$uiViewAnim",
    "$animEnter",
    "$animLeave",
    "$$animLeave",
    "$emit",
    "cloned",
    "clone",
    "resolve",
    "remove",
    "$destroy",
    "_viewData_1",
    "cleanupLastView",
    "hasComponentImpl",
    "_uiCanExitId",
    "$onInit",
    "viewState",
    "self",
    "hookOptions",
    "bind",
    "uiOnParamsChanged",
    "viewCreationTrans_1",
    "exiting",
    "indexOf",
    "toParams",
    "fromParams",
    "getNodeSchema",
    "paramSchema",
    "toSchema",
    "fromSchema",
    "changedToParams",
    "param",
    "idx",
    "equals",
    "changedKeys_1",
    "newValues",
    "uiCanExit",
    "id_1",
    "prevTruthyAnswer_1",
    "redirectedFrom",
    "criteria",
    "onBefore",
    "ids",
    "useAnchorScroll",
    "$anchorScroll",
    "scrollIntoView"
  ],
  "mappings": "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"
}