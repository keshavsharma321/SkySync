{
  "version": 3,
  "file": "viewDirective.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter\\angularjs\\directives\\viewDirective.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/** @publicapi @module directives */ /** */\r\nimport {\r\n  $QLike,\r\n  ActiveUIView,\r\n  extend,\r\n  filter,\r\n  HookRegOptions,\r\n  isDefined,\r\n  isFunction,\r\n  isString,\r\n  kebobString,\r\n  noop,\r\n  Obj,\r\n  Param,\r\n  parse,\r\n  PathNode,\r\n  ResolveContext,\r\n  StateDeclaration,\r\n  tail,\r\n  trace,\r\n  Transition,\r\n  TransitionService,\r\n  TypedMap,\r\n  unnestR,\r\n  ViewService,\r\n} from '@uirouter/core';\r\nimport { IAugmentedJQuery, IInterpolateService, IScope, ITranscludeFunction } from 'angular';\r\nimport { ng as angular } from '../angular';\r\nimport { Ng1Controller, Ng1StateDeclaration } from '../interface';\r\nimport { getLocals } from '../services';\r\nimport { Ng1ViewConfig } from '../statebuilders/views';\r\nimport { ng1_directive } from './stateDirectives';\r\n\r\n/** @hidden */\r\nexport type UIViewData = {\r\n  $cfg: Ng1ViewConfig;\r\n  $uiView: ActiveUIView;\r\n};\r\n\r\n/** @hidden */\r\nexport type UIViewAnimData = {\r\n  $animEnter: Promise<any>;\r\n  $animLeave: Promise<any>;\r\n  $$animLeave: { resolve: () => any }; // \"deferred\"\r\n};\r\n\r\n/**\r\n * `ui-view`: A viewport directive which is filled in by a view from the active state.\r\n *\r\n * ### Attributes\r\n *\r\n * - `name`: (Optional) A view name.\r\n *   The name should be unique amongst the other views in the same state.\r\n *   You can have views of the same name that live in different states.\r\n *   The ui-view can be targeted in a View using the name ([[Ng1StateDeclaration.views]]).\r\n *\r\n * - `autoscroll`: an expression. When it evaluates to true, the `ui-view` will be scrolled into view when it is activated.\r\n *   Uses [[$uiViewScroll]] to do the scrolling.\r\n *\r\n * - `onload`: Expression to evaluate whenever the view updates.\r\n *\r\n * #### Example:\r\n * A view can be unnamed or named.\r\n * ```html\r\n * <!-- Unnamed -->\r\n * <div ui-view></div>\r\n *\r\n * <!-- Named -->\r\n * <div ui-view=\"viewName\"></div>\r\n *\r\n * <!-- Named (different style) -->\r\n * <ui-view name=\"viewName\"></ui-view>\r\n * ```\r\n *\r\n * You can only have one unnamed view within any template (or root html). If you are only using a\r\n * single view and it is unnamed then you can populate it like so:\r\n *\r\n * ```html\r\n * <div ui-view></div>\r\n * $stateProvider.state(\"home\", {\r\n *   template: \"<h1>HELLO!</h1>\"\r\n * })\r\n * ```\r\n *\r\n * The above is a convenient shortcut equivalent to specifying your view explicitly with the\r\n * [[Ng1StateDeclaration.views]] config property, by name, in this case an empty name:\r\n *\r\n * ```js\r\n * $stateProvider.state(\"home\", {\r\n *   views: {\r\n *     \"\": {\r\n *       template: \"<h1>HELLO!</h1>\"\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * But typically you'll only use the views property if you name your view or have more than one view\r\n * in the same template. There's not really a compelling reason to name a view if its the only one,\r\n * but you could if you wanted, like so:\r\n *\r\n * ```html\r\n * <div ui-view=\"main\"></div>\r\n * ```\r\n *\r\n * ```js\r\n * $stateProvider.state(\"home\", {\r\n *   views: {\r\n *     \"main\": {\r\n *       template: \"<h1>HELLO!</h1>\"\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * Really though, you'll use views to set up multiple views:\r\n *\r\n * ```html\r\n * <div ui-view></div>\r\n * <div ui-view=\"chart\"></div>\r\n * <div ui-view=\"data\"></div>\r\n * ```\r\n *\r\n * ```js\r\n * $stateProvider.state(\"home\", {\r\n *   views: {\r\n *     \"\": {\r\n *       template: \"<h1>HELLO!</h1>\"\r\n *     },\r\n *     \"chart\": {\r\n *       template: \"<chart_thing/>\"\r\n *     },\r\n *     \"data\": {\r\n *       template: \"<data_thing/>\"\r\n *     }\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * #### Examples for `autoscroll`:\r\n * ```html\r\n * <!-- If autoscroll present with no expression,\r\n *      then scroll ui-view into view -->\r\n * <ui-view autoscroll/>\r\n *\r\n * <!-- If autoscroll present with valid expression,\r\n *      then scroll ui-view into view if expression evaluates to true -->\r\n * <ui-view autoscroll='true'/>\r\n * <ui-view autoscroll='false'/>\r\n * <ui-view autoscroll='scopeVariable'/>\r\n * ```\r\n *\r\n * Resolve data:\r\n *\r\n * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\r\n * can be customized using [[Ng1ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\r\n *\r\n * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\r\n * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\r\n * depends on `$resolve` data.\r\n *\r\n * #### Example:\r\n * ```js\r\n * $stateProvider.state('home', {\r\n *   template: '<my-component user=\"$resolve.user\"></my-component>',\r\n *   resolve: {\r\n *     user: function(UserService) { return UserService.fetchUser(); }\r\n *   }\r\n * });\r\n * ```\r\n */\r\nexport let uiView: ng1_directive;\r\n// eslint-disable-next-line prefer-const\r\nuiView = [\r\n  '$view',\r\n  '$animate',\r\n  '$uiViewScroll',\r\n  '$interpolate',\r\n  '$q',\r\n  function $ViewDirective(\r\n    $view: ViewService,\r\n    $animate: any,\r\n    $uiViewScroll: any,\r\n    $interpolate: IInterpolateService,\r\n    $q: $QLike\r\n  ) {\r\n    function getRenderer() {\r\n      return {\r\n        enter: function (element: JQuery, target: any, cb: Function) {\r\n          if (angular.version.minor > 2) {\r\n            $animate.enter(element, null, target).then(cb);\r\n          } else {\r\n            $animate.enter(element, null, target, cb);\r\n          }\r\n        },\r\n        leave: function (element: JQuery, cb: Function) {\r\n          if (angular.version.minor > 2) {\r\n            $animate.leave(element).then(cb);\r\n          } else {\r\n            $animate.leave(element, cb);\r\n          }\r\n        },\r\n      };\r\n    }\r\n\r\n    function configsEqual(config1: Ng1ViewConfig, config2: Ng1ViewConfig) {\r\n      return config1 === config2;\r\n    }\r\n\r\n    const rootData = {\r\n      $cfg: { viewDecl: { $context: $view._pluginapi._rootViewContext() } },\r\n      $uiView: {},\r\n    };\r\n\r\n    const directive = {\r\n      count: 0,\r\n      restrict: 'ECA',\r\n      terminal: true,\r\n      priority: 400,\r\n      transclude: 'element',\r\n      compile: function (tElement: JQuery, tAttrs: Obj, $transclude: ITranscludeFunction) {\r\n        return function (scope: IScope, $element: IAugmentedJQuery, attrs: Obj) {\r\n          const onloadExp = attrs['onload'] || '',\r\n            autoScrollExp = attrs['autoscroll'],\r\n            renderer = getRenderer(),\r\n            inherited = $element.inheritedData('$uiView') || rootData,\r\n            name = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';\r\n\r\n          let previousEl: JQuery, currentEl: JQuery, currentScope: IScope, viewConfig: Ng1ViewConfig;\r\n\r\n          const activeUIView: ActiveUIView = {\r\n            $type: 'ng1',\r\n            id: directive.count++, // Global sequential ID for ui-view tags added to DOM\r\n            name: name, // ui-view name (<div ui-view=\"name\"></div>\r\n            fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + '.' + name : name, // fully qualified name, describes location in DOM\r\n            config: null, // The ViewConfig loaded (from a state.views definition)\r\n            configUpdated: configUpdatedCallback, // Called when the matching ViewConfig changes\r\n            get creationContext() {\r\n              // The context in which this ui-view \"tag\" was created\r\n              const fromParentTagConfig = parse('$cfg.viewDecl.$context')(inherited);\r\n              // Allow <ui-view name=\"foo\"><ui-view name=\"bar\"></ui-view></ui-view>\r\n              // See https://github.com/angular-ui/ui-router/issues/3355\r\n              const fromParentTag = parse('$uiView.creationContext')(inherited);\r\n              return fromParentTagConfig || fromParentTag;\r\n            },\r\n          };\r\n\r\n          trace.traceUIViewEvent('Linking', activeUIView);\r\n\r\n          function configUpdatedCallback(config?: Ng1ViewConfig) {\r\n            if (config && !(config instanceof Ng1ViewConfig)) return;\r\n            if (configsEqual(viewConfig, config)) return;\r\n            trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);\r\n\r\n            viewConfig = config;\r\n            updateView(config);\r\n          }\r\n\r\n          $element.data('$uiView', { $uiView: activeUIView });\r\n\r\n          updateView();\r\n\r\n          const unregister = $view.registerUIView(activeUIView);\r\n          scope.$on('$destroy', function () {\r\n            trace.traceUIViewEvent('Destroying/Unregistering', activeUIView);\r\n            unregister();\r\n          });\r\n\r\n          function cleanupLastView() {\r\n            if (previousEl) {\r\n              trace.traceUIViewEvent('Removing (previous) el', previousEl.data('$uiView'));\r\n              previousEl.remove();\r\n              previousEl = null;\r\n            }\r\n\r\n            if (currentScope) {\r\n              trace.traceUIViewEvent('Destroying scope', activeUIView);\r\n              currentScope.$destroy();\r\n              currentScope = null;\r\n            }\r\n\r\n            if (currentEl) {\r\n              const _viewData = currentEl.data('$uiViewAnim');\r\n              trace.traceUIViewEvent('Animate out', _viewData);\r\n              renderer.leave(currentEl, function () {\r\n                _viewData.$$animLeave.resolve();\r\n                previousEl = null;\r\n              });\r\n\r\n              previousEl = currentEl;\r\n              currentEl = null;\r\n            }\r\n          }\r\n\r\n          function updateView(config?: Ng1ViewConfig) {\r\n            const newScope = scope.$new();\r\n            const animEnter = $q.defer(),\r\n              animLeave = $q.defer();\r\n\r\n            const $uiViewData: UIViewData = {\r\n              $cfg: config,\r\n              $uiView: activeUIView,\r\n            };\r\n\r\n            const $uiViewAnim: UIViewAnimData = {\r\n              $animEnter: animEnter.promise,\r\n              $animLeave: animLeave.promise,\r\n              $$animLeave: animLeave,\r\n            };\r\n\r\n            /**\r\n             * @ngdoc event\r\n             * @name ui.router.state.directive:ui-view#$viewContentLoading\r\n             * @eventOf ui.router.state.directive:ui-view\r\n             * @eventType emits on ui-view directive scope\r\n             * @description\r\n             *\r\n             * Fired once the view **begins loading**, *before* the DOM is rendered.\r\n             *\r\n             * @param {Object} event Event object.\r\n             * @param {string} viewName Name of the view.\r\n             */\r\n            newScope.$emit('$viewContentLoading', name);\r\n\r\n            const cloned = $transclude(newScope, function (clone) {\r\n              clone.data('$uiViewAnim', $uiViewAnim);\r\n              clone.data('$uiView', $uiViewData);\r\n              renderer.enter(clone, $element, function onUIViewEnter() {\r\n                animEnter.resolve();\r\n                if (currentScope) currentScope.$emit('$viewContentAnimationEnded');\r\n\r\n                if ((isDefined(autoScrollExp) && !autoScrollExp) || scope.$eval(autoScrollExp)) {\r\n                  $uiViewScroll(clone);\r\n                }\r\n              });\r\n\r\n              cleanupLastView();\r\n            });\r\n\r\n            currentEl = cloned;\r\n            currentScope = newScope;\r\n            /**\r\n             * @ngdoc event\r\n             * @name ui.router.state.directive:ui-view#$viewContentLoaded\r\n             * @eventOf ui.router.state.directive:ui-view\r\n             * @eventType emits on ui-view directive scope\r\n             * @description           *\r\n             * Fired once the view is **loaded**, *after* the DOM is rendered.\r\n             *\r\n             * @param {Object} event Event object.\r\n             */\r\n            currentScope.$emit('$viewContentLoaded', config || viewConfig);\r\n            currentScope.$eval(onloadExp);\r\n          }\r\n        };\r\n      },\r\n    };\r\n\r\n    return directive;\r\n  },\r\n];\r\n\r\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$q'];\r\n\r\n/** @hidden */\r\nfunction $ViewDirectiveFill(\r\n  $compile: angular.ICompileService,\r\n  $controller: angular.IControllerService,\r\n  $transitions: TransitionService,\r\n  $view: ViewService,\r\n  $q: angular.IQService\r\n) {\r\n  const getControllerAs = parse('viewDecl.controllerAs');\r\n  const getResolveAs = parse('viewDecl.resolveAs');\r\n\r\n  return {\r\n    restrict: 'ECA',\r\n    priority: -400,\r\n    compile: function (tElement: JQuery) {\r\n      const initial = tElement.html();\r\n      tElement.empty();\r\n\r\n      return function (scope: IScope, $element: JQuery) {\r\n        const data: UIViewData = $element.data('$uiView');\r\n        if (!data) {\r\n          $element.html(initial);\r\n          $compile($element.contents() as any)(scope);\r\n          return;\r\n        }\r\n\r\n        const cfg: Ng1ViewConfig = data.$cfg || <any>{ viewDecl: {}, getTemplate: noop };\r\n        const resolveCtx: ResolveContext = cfg.path && new ResolveContext(cfg.path);\r\n        $element.html(cfg.getTemplate($element, resolveCtx) || initial);\r\n        trace.traceUIViewFill(data.$uiView, $element.html());\r\n\r\n        const link = $compile($element.contents() as any);\r\n        const controller = cfg.controller as angular.IControllerService;\r\n        const controllerAs: string = getControllerAs(cfg);\r\n        const resolveAs: string = getResolveAs(cfg);\r\n        const locals = resolveCtx && getLocals(resolveCtx);\r\n\r\n        scope[resolveAs] = locals;\r\n\r\n        if (controller) {\r\n          const controllerInstance = <Ng1Controller>(\r\n            $controller(controller, extend({}, locals, { $scope: scope, $element: $element }))\r\n          );\r\n          if (controllerAs) {\r\n            scope[controllerAs] = controllerInstance;\r\n            scope[controllerAs][resolveAs] = locals;\r\n          }\r\n\r\n          // TODO: Use $view service as a central point for registering component-level hooks\r\n          // Then, when a component is created, tell the $view service, so it can invoke hooks\r\n          // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\r\n          // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\r\n\r\n          $element.data('$ngControllerController', controllerInstance);\r\n          $element.children().data('$ngControllerController', controllerInstance);\r\n\r\n          registerControllerCallbacks($q, $transitions, controllerInstance, scope, cfg);\r\n        }\r\n\r\n        // Wait for the component to appear in the DOM\r\n        if (isString(cfg.component)) {\r\n          const kebobName = kebobString(cfg.component);\r\n          const tagRegexp = new RegExp(`^(x-|data-)?${kebobName}$`, 'i');\r\n\r\n          const getComponentController = () => {\r\n            const directiveEl = [].slice\r\n              .call($element[0].children)\r\n              .filter((el: Element) => el && el.tagName && tagRegexp.exec(el.tagName));\r\n\r\n            return directiveEl && angular.element(directiveEl).data(`$${cfg.component}Controller`);\r\n          };\r\n\r\n          const deregisterWatch = scope.$watch(getComponentController, function (ctrlInstance) {\r\n            if (!ctrlInstance) return;\r\n            registerControllerCallbacks($q, $transitions, ctrlInstance, scope, cfg);\r\n            deregisterWatch();\r\n          });\r\n        }\r\n\r\n        link(scope);\r\n      };\r\n    },\r\n  };\r\n}\r\n\r\n/** @hidden */\r\nconst hasComponentImpl = typeof (angular as any).module('ui.router')['component'] === 'function';\r\n/** @hidden incrementing id */\r\nlet _uiCanExitId = 0;\r\n\r\n/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\r\nfunction registerControllerCallbacks(\r\n  $q: angular.IQService,\r\n  $transitions: TransitionService,\r\n  controllerInstance: Ng1Controller,\r\n  $scope: IScope,\r\n  cfg: Ng1ViewConfig\r\n) {\r\n  // Call $onInit() ASAP\r\n  if (\r\n    isFunction(controllerInstance.$onInit) &&\r\n    !((cfg.viewDecl.component || cfg.viewDecl.componentProvider) && hasComponentImpl)\r\n  ) {\r\n    controllerInstance.$onInit();\r\n  }\r\n\r\n  const viewState: Ng1StateDeclaration = tail(cfg.path).state.self;\r\n\r\n  const hookOptions: HookRegOptions = { bind: controllerInstance };\r\n  // Add component-level hook for onUiParamsChanged\r\n  if (isFunction(controllerInstance.uiOnParamsChanged)) {\r\n    const resolveContext: ResolveContext = new ResolveContext(cfg.path);\r\n    const viewCreationTrans = resolveContext.getResolvable('$transition$').data;\r\n\r\n    // Fire callback on any successful transition\r\n    const paramsUpdated = ($transition$: Transition) => {\r\n      // Exit early if the $transition$ is the same as the view was created within.\r\n      // Exit early if the $transition$ will exit the state the view is for.\r\n      if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(viewState as StateDeclaration) !== -1)\r\n        return;\r\n\r\n      const toParams = $transition$.params('to') as TypedMap<any>;\r\n      const fromParams = $transition$.params<TypedMap<any>>('from') as TypedMap<any>;\r\n      const getNodeSchema = (node: PathNode) => node.paramSchema;\r\n      const toSchema: Param[] = $transition$.treeChanges('to').map(getNodeSchema).reduce(unnestR, []);\r\n      const fromSchema: Param[] = $transition$.treeChanges('from').map(getNodeSchema).reduce(unnestR, []);\r\n\r\n      // Find the to params that have different values than the from params\r\n      const changedToParams = toSchema.filter((param: Param) => {\r\n        const idx = fromSchema.indexOf(param);\r\n        return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);\r\n      });\r\n\r\n      // Only trigger callback if a to param has changed or is new\r\n      if (changedToParams.length) {\r\n        const changedKeys: string[] = changedToParams.map((x) => x.id);\r\n        // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\r\n        const newValues = filter(toParams, (val, key) => changedKeys.indexOf(key) !== -1);\r\n        controllerInstance.uiOnParamsChanged(newValues, $transition$);\r\n      }\r\n    };\r\n    $scope.$on('$destroy', <any>$transitions.onSuccess({}, paramsUpdated, hookOptions));\r\n  }\r\n\r\n  // Add component-level hook for uiCanExit\r\n  if (isFunction(controllerInstance.uiCanExit)) {\r\n    const id = _uiCanExitId++;\r\n    const cacheProp = '_uiCanExitIds';\r\n\r\n    // Returns true if a redirect transition already answered truthy\r\n    const prevTruthyAnswer = (trans: Transition) =>\r\n      !!trans && ((trans[cacheProp] && trans[cacheProp][id] === true) || prevTruthyAnswer(trans.redirectedFrom()));\r\n\r\n    // If a user answered yes, but the transition was later redirected, don't also ask for the new redirect transition\r\n    const wrappedHook = (trans: Transition) => {\r\n      let promise;\r\n      const ids = (trans[cacheProp] = trans[cacheProp] || {});\r\n\r\n      if (!prevTruthyAnswer(trans)) {\r\n        promise = $q.when(controllerInstance.uiCanExit(trans));\r\n        promise.then((val) => (ids[id] = val !== false));\r\n      }\r\n      return promise;\r\n    };\r\n\r\n    const criteria = { exiting: viewState.name };\r\n    $scope.$on('$destroy', <any>$transitions.onBefore(criteria, wrappedHook, hookOptions));\r\n  }\r\n}\r\n\r\nangular.module('ui.router.state').directive('uiView', <any>uiView);\r\nangular.module('ui.router.state').directive('uiView', <any>$ViewDirectiveFill);\r\n"
  ]
}