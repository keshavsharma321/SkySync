{
  "version": 3,
  "file": "urlRouterProvider.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter\\angularjs\\urlRouterProvider.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/** @publicapi @module url */ /** */\r\nimport {\r\n  UIRouter,\r\n  LocationServices,\r\n  $InjectorLike,\r\n  BaseUrlRule,\r\n  UrlRuleHandlerFn,\r\n  UrlMatcher,\r\n  IInjectable,\r\n  UrlRouter,\r\n} from '@uirouter/core';\r\nimport { services, isString, isFunction, isArray, identity } from '@uirouter/core';\r\n\r\nexport interface RawNg1RuleFunction {\r\n  ($injector: $InjectorLike, $location: LocationServices): string | void;\r\n}\r\n\r\n/**\r\n * Manages rules for client-side URL\r\n *\r\n * ### Deprecation warning:\r\n * This class is now considered to be an internal API\r\n * Use the [[UrlService]] instead.\r\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\r\n *\r\n * This class manages the router rules for what to do when the URL changes.\r\n *\r\n * This provider remains for backwards compatibility.\r\n *\r\n * @internalapi\r\n * @deprecated\r\n */\r\nexport class UrlRouterProvider {\r\n  static injectableHandler(router: UIRouter, handler: IInjectable): UrlRuleHandlerFn {\r\n    return (match) => services.$injector.invoke(handler, null, { $match: match, $stateParams: router.globals.params });\r\n  }\r\n\r\n  /** @hidden */\r\n  constructor(/** @hidden */ private router: UIRouter) {}\r\n\r\n  /** @hidden */\r\n  $get(): UrlRouter {\r\n    const urlService = this.router.urlService;\r\n    this.router.urlRouter.update(true);\r\n    if (!urlService.interceptDeferred) urlService.listen();\r\n    return this.router.urlRouter;\r\n  }\r\n\r\n  /**\r\n   * Registers a url handler function.\r\n   *\r\n   * Registers a low level url handler (a `rule`).\r\n   * A rule detects specific URL patterns and returns a redirect, or performs some action.\r\n   *\r\n   * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\r\n   *\r\n   * #### Example:\r\n   * ```js\r\n   * var app = angular.module('app', ['ui.router.router']);\r\n   *\r\n   * app.config(function ($urlRouterProvider) {\r\n   *   // Here's an example of how you might allow case insensitive urls\r\n   *   $urlRouterProvider.rule(function ($injector, $location) {\r\n   *     var path = $location.path(),\r\n   *         normalized = path.toLowerCase();\r\n   *\r\n   *     if (path !== normalized) {\r\n   *       return normalized;\r\n   *     }\r\n   *   });\r\n   * });\r\n   * ```\r\n   *\r\n   * @param ruleFn\r\n   * Handler function that takes `$injector` and `$location` services as arguments.\r\n   * You can use them to detect a url and return a different url as a string.\r\n   *\r\n   * @return [[UrlRouterProvider]] (`this`)\r\n   */\r\n  rule(ruleFn: RawNg1RuleFunction): UrlRouterProvider {\r\n    if (!isFunction(ruleFn)) throw new Error(\"'rule' must be a function\");\r\n\r\n    const match = () => ruleFn(services.$injector, this.router.locationService);\r\n\r\n    const rule = new BaseUrlRule(match, identity);\r\n    this.router.urlService.rules.rule(rule);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Defines the path or behavior to use when no url can be matched.\r\n   *\r\n   * #### Example:\r\n   * ```js\r\n   * var app = angular.module('app', ['ui.router.router']);\r\n   *\r\n   * app.config(function ($urlRouterProvider) {\r\n   *   // if the path doesn't match any of the urls you configured\r\n   *   // otherwise will take care of routing the user to the\r\n   *   // specified url\r\n   *   $urlRouterProvider.otherwise('/index');\r\n   *\r\n   *   // Example of using function rule as param\r\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\r\n   *     return '/a/valid/url';\r\n   *   });\r\n   * });\r\n   * ```\r\n   *\r\n   * @param rule\r\n   * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\r\n   * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\r\n   *\r\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\r\n   */\r\n  otherwise(rule: string | RawNg1RuleFunction): UrlRouterProvider {\r\n    const urlRules = this.router.urlService.rules;\r\n    if (isString(rule)) {\r\n      urlRules.otherwise(rule);\r\n    } else if (isFunction(rule)) {\r\n      urlRules.otherwise(() => rule(services.$injector, this.router.locationService));\r\n    } else {\r\n      throw new Error(\"'rule' must be a string or function\");\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers a handler for a given url matching.\r\n   *\r\n   * If the handler is a string, it is\r\n   * treated as a redirect, and is interpolated according to the syntax of match\r\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\r\n   *\r\n   * If the handler is a function, it is injectable.\r\n   * It gets invoked if `$location` matches.\r\n   * You have the option of inject the match object as `$match`.\r\n   *\r\n   * The handler can return\r\n   *\r\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\r\n   *   will continue trying to find another one that matches.\r\n   * - **string** which is treated as a redirect and passed to `$location.url()`\r\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\r\n   *\r\n   * #### Example:\r\n   * ```js\r\n   * var app = angular.module('app', ['ui.router.router']);\r\n   *\r\n   * app.config(function ($urlRouterProvider) {\r\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\r\n   *     if ($state.$current.navigable !== state ||\r\n   *         !equalForKeys($match, $stateParams) {\r\n   *      $state.transitionTo(state, $match, false);\r\n   *     }\r\n   *   });\r\n   * });\r\n   * ```\r\n   *\r\n   * @param what A pattern string to match, compiled as a [[UrlMatcher]].\r\n   * @param handler The path (or function that returns a path) that you want to redirect your user to.\r\n   * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\r\n   *\r\n   * Note: the handler may also invoke arbitrary code, such as `$state.go()`\r\n   */\r\n  when(what: RegExp | UrlMatcher | string, handler: string | IInjectable): this {\r\n    if (isArray(handler) || isFunction(handler)) {\r\n      handler = UrlRouterProvider.injectableHandler(this.router, handler);\r\n    }\r\n\r\n    this.router.urlService.rules.when(what, handler as any);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Disables monitoring of the URL.\r\n   *\r\n   * Call this method before UI-Router has bootstrapped.\r\n   * It will stop UI-Router from performing the initial url sync.\r\n   *\r\n   * This can be useful to perform some asynchronous initialization before the router starts.\r\n   * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\r\n   *\r\n   * #### Example:\r\n   * ```js\r\n   * var app = angular.module('app', ['ui.router']);\r\n   *\r\n   * app.config(function ($urlRouterProvider) {\r\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\r\n   *   $urlRouterProvider.deferIntercept();\r\n   * })\r\n   *\r\n   * app.run(function (MyService, $urlRouter, $http) {\r\n   *   $http.get(\"/stuff\").then(function(resp) {\r\n   *     MyService.doStuff(resp.data);\r\n   *     $urlRouter.listen();\r\n   *     $urlRouter.sync();\r\n   *   });\r\n   * });\r\n   * ```\r\n   *\r\n   * @param defer Indicates whether to defer location change interception.\r\n   *        Passing no parameter is equivalent to `true`.\r\n   */\r\n  deferIntercept(defer?: boolean): void {\r\n    this.router.urlService.deferIntercept(defer);\r\n  }\r\n}\r\n"
  ]
}