{
  "version": 3,
  "file": "templateFactory.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter\\angularjs\\templateFactory.ts"
  ],
  "names": [],
  "mappings": ";;;AAAA,8BAA8B,CAAC,MAAM;AACrC,qCAA0C;AAE1C,uCAcwB;AAGxB;;GAEG;AACH;IAAA;QAAA,iBAuLC;QAtLC,cAAc,CAAS,aAAQ,GAAG,YAAO,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;QAK5D,cAAc,CAAC,SAAI,GAAG;YACpB,OAAO;YACP,gBAAgB;YAChB,WAAW;YACX,UAAC,KAAK,EAAE,cAAc,EAAE,SAAS;gBAC/B,KAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBAChH,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,KAAI,CAAC,cAAc,GAAG,cAAc,CAAC;gBACrC,OAAO,KAAI,CAAC;YACd,CAAC;SACF,CAAC;IAuKJ,CAAC;IArKC,cAAc;IACd,wCAAc,GAAd,UAAe,KAAc;QAC3B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,oCAAU,GAAV,UACE,MAA0B,EAC1B,MAAW,EACX,OAAuB;QAEvB,IAAM,eAAe,GAAG,qBAAqB,CAAC;QAE9C,IAAM,UAAU,GAAG,UAAC,MAAM,IAAK,OAAA,eAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAnB,CAAmB,CAAC,EAA3D,CAA2D,CAAC;QAC3F,IAAM,WAAW,GAAG,UAAC,MAAM,IAAK,OAAA,eAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,EAApB,CAAoB,CAAC,EAA5D,CAA4D,CAAC;QAE7F,OAAO,gBAAS,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC/B,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACtD,CAAC,CAAC,gBAAS,CAAC,MAAM,CAAC,WAAW,CAAC;gBAC/B,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBACtD,CAAC,CAAC,gBAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC;oBACpC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,gBAAgB,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;oBACzE,CAAC,CAAC,gBAAS,CAAC,MAAM,CAAC,SAAS,CAAC;wBAC7B,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC;wBAC/B,CAAC,CAAC,gBAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC;4BACrC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;4BACpF,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;OAQG;IACH,oCAAU,GAAV,UAAW,QAA2B,EAAE,MAAkB;QACxD,OAAO,iBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAO,QAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;IACnE,CAAC;IAED;;;;;;;;OAQG;IACH,iCAAO,GAAP,UAAQ,GAAsB,EAAE,MAAW;QACzC,IAAI,iBAAU,CAAC,GAAG,CAAC;YAAE,GAAG,GAAS,GAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,GAAG,IAAI,IAAI;YAAE,OAAO,IAAI,CAAC;QAE7B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,KAAK;iBACd,GAAG,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC;iBAC1E,IAAI,CAAC,UAAU,QAAQ;gBACtB,OAAO,QAAQ,CAAC,IAAI,CAAC;YACvB,CAAC,CAAC,CAAC;SACN;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;;OAOG;IACH,sCAAY,GAAZ,UAAa,QAAqB,EAAE,MAAW,EAAE,OAAuB;QACtE,IAAM,IAAI,GAAG,eAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAM,UAAU,GAAG,cAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAI,CAAQ,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QACxE,IAAM,UAAU,GAAG,IAAI,iBAAU,CAAC,EAAE,EAAY,UAAU,EAAE,IAAI,CAAC,CAAC;QAClE,OAAO,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACH,+CAAqB,GAArB,UAAsB,QAAqB,EAAE,MAAW,EAAE,OAAuB;QAC/E,IAAM,IAAI,GAAG,eAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAM,UAAU,GAAG,cAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAI,CAAQ,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QACxE,IAAM,UAAU,GAAG,IAAI,iBAAU,CAAC,EAAE,EAAY,UAAU,EAAE,IAAI,CAAC,CAAC;QAClE,OAAO,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,+CAAqB,GAArB,UAAsB,MAAwB,EAAE,OAAuB,EAAE,SAAiB,EAAE,QAAc;QACxG,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;QAE1B,mBAAmB;QACnB,IAAM,MAAM,GAAG,YAAO,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACtD,iFAAiF;QACjF,IAAM,KAAK,GAAG,UAAC,SAAiB;YAC9B,IAAM,OAAO,GAAG,kBAAW,CAAC,SAAS,CAAC,CAAC;YACvC,OAAO,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAK,OAAS,CAAC,CAAC,CAAC,OAAO,CAAC;QAC/D,CAAC,CAAC;QAEF,IAAM,YAAY,GAAG,UAAC,KAAmB;YAC/B,IAAA,IAAI,GAAW,KAAK,KAAhB,EAAE,IAAI,GAAK,KAAK,KAAV,CAAW;YAC7B,IAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;YAC7B,kFAAkF;YAClF,qEAAqE;YACrE,2GAA2G;YAC3G,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAAE,OAAU,QAAQ,UAAK,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAG,CAAC;YAE9F,IAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;YAC3C,qEAAqE;YACrE,+CAA+C;YAC/C,IAAI,IAAI,KAAK,GAAG;gBAAE,OAAU,QAAQ,YAAO,MAAM,iBAAY,WAAW,QAAK,CAAC;YAE9E,iEAAiE;YACjE,6FAA6F;YAC7F,uDAAuD;YACvD,IAAI,IAAI,KAAK,GAAG,EAAE;gBAChB,IAAM,GAAG,GAAG,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;gBAC/C,IAAM,EAAE,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC;gBAC3B,IAAM,IAAI,GAAG,CAAC,EAAE,IAAI,eAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC3D,qEAAqE;gBACrE,IAAM,WAAW,GAAG,cAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAI,EAAE,CAAC,MAAM,GAAG,CAAC,OAAG,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC5D,OAAU,QAAQ,mBAAc,WAAW,GAAG,WAAW,SAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAI,CAAC;aACjF;YAED,yCAAyC;YACzC,OAAU,QAAQ,UAAK,MAAM,iBAAY,WAAW,MAAG,CAAC;QAC1D,CAAC,CAAC;QAEF,IAAM,KAAK,GAAG,oBAAoB,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1E,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;QACnC,OAAO,MAAI,SAAS,SAAI,KAAK,WAAM,SAAS,MAAG,CAAC;IAClD,CAAC;IACH,sBAAC;AAAD,CAAC,AAvLD,IAuLC;AAvLY,0CAAe;AAyL5B,0EAA0E;AAC1E,SAAS,oBAAoB,CAAC,IAAY;IACxC,IAAM,OAAO,GAAU,eAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,oBAAoB;IACvF,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM;QAAE,MAAM,IAAI,KAAK,CAAC,qCAAmC,IAAI,MAAG,CAAC,CAAC;IAC7F,OAAO,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,cAAO,EAAE,EAAE,CAAC,CAAC;AACtD,CAAC;AAED,iEAAiE;AACjE,qGAAqG;AACrG,IAAM,WAAW,GAAG,UAAC,GAAQ;IAC3B,IAAI,eAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC;QAAE,OAAO,aAAa,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC/E,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAClC,CAAC,CAAC;AAOF,yDAAyD;AACzD,gGAAgG;AAChG,IAAM,aAAa,GAAG,UAAC,WAAgB;IACrC,OAAA,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;QAC5B,sCAAsC;SACrC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,GAAG,EAAE,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAjD,CAAiD,CAAC;QAChE,wBAAwB;SACvB,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,gBAAS,CAAC,KAAK,CAAC,IAAI,cAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAArC,CAAqC,CAAC;QACzD,0CAA0C;SACzC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAmB,CAAA,EAAtE,CAAsE,CAAC;AANzF,CAMyF,CAAC",
  "sourcesContent": [
    "/** @publicapi @module view */ /** */\r\nimport { ng as angular } from './angular';\r\nimport { IAugmentedJQuery } from 'angular';\r\nimport {\r\n  isArray,\r\n  isDefined,\r\n  isFunction,\r\n  isObject,\r\n  services,\r\n  Obj,\r\n  IInjectable,\r\n  tail,\r\n  kebobString,\r\n  unnestR,\r\n  ResolveContext,\r\n  Resolvable,\r\n  RawParams,\r\n} from '@uirouter/core';\r\nimport { Ng1ViewDeclaration, TemplateFactoryProvider } from './interface';\r\n\r\n/**\r\n * Service which manages loading of templates from a ViewConfig.\r\n */\r\nexport class TemplateFactory implements TemplateFactoryProvider {\r\n  /** @hidden */ private _useHttp = angular.version.minor < 3;\r\n  /** @hidden */ private $templateRequest;\r\n  /** @hidden */ private $templateCache;\r\n  /** @hidden */ private $http;\r\n\r\n  /** @hidden */ $get = [\r\n    '$http',\r\n    '$templateCache',\r\n    '$injector',\r\n    ($http, $templateCache, $injector) => {\r\n      this.$templateRequest = $injector.has && $injector.has('$templateRequest') && $injector.get('$templateRequest');\r\n      this.$http = $http;\r\n      this.$templateCache = $templateCache;\r\n      return this;\r\n    },\r\n  ];\r\n\r\n  /** @hidden */\r\n  useHttpService(value: boolean) {\r\n    this._useHttp = value;\r\n  }\r\n\r\n  /**\r\n   * Creates a template from a configuration object.\r\n   *\r\n   * @param config Configuration object for which to load a template.\r\n   * The following properties are search in the specified order, and the first one\r\n   * that is defined is used to create the template:\r\n   *\r\n   * @param params  Parameters to pass to the template function.\r\n   * @param context The resolve context associated with the template's view\r\n   *\r\n   * @return {string|object}  The template html as a string, or a promise for\r\n   * that string,or `null` if no template is configured.\r\n   */\r\n  fromConfig(\r\n    config: Ng1ViewDeclaration,\r\n    params: any,\r\n    context: ResolveContext\r\n  ): Promise<{ template?: string; component?: string }> {\r\n    const defaultTemplate = '<ui-view></ui-view>';\r\n\r\n    const asTemplate = (result) => services.$q.when(result).then((str) => ({ template: str }));\r\n    const asComponent = (result) => services.$q.when(result).then((str) => ({ component: str }));\r\n\r\n    return isDefined(config.template)\r\n      ? asTemplate(this.fromString(config.template, params))\r\n      : isDefined(config.templateUrl)\r\n      ? asTemplate(this.fromUrl(config.templateUrl, params))\r\n      : isDefined(config.templateProvider)\r\n      ? asTemplate(this.fromProvider(config.templateProvider, params, context))\r\n      : isDefined(config.component)\r\n      ? asComponent(config.component)\r\n      : isDefined(config.componentProvider)\r\n      ? asComponent(this.fromComponentProvider(config.componentProvider, params, context))\r\n      : asTemplate(defaultTemplate);\r\n  }\r\n\r\n  /**\r\n   * Creates a template from a string or a function returning a string.\r\n   *\r\n   * @param template html template as a string or function that returns an html template as a string.\r\n   * @param params Parameters to pass to the template function.\r\n   *\r\n   * @return {string|object} The template html as a string, or a promise for that\r\n   * string.\r\n   */\r\n  fromString(template: string | Function, params?: RawParams) {\r\n    return isFunction(template) ? (<any>template)(params) : template;\r\n  }\r\n\r\n  /**\r\n   * Loads a template from the a URL via `$http` and `$templateCache`.\r\n   *\r\n   * @param {string|Function} url url of the template to load, or a function\r\n   * that returns a url.\r\n   * @param {Object} params Parameters to pass to the url function.\r\n   * @return {string|Promise.<string>} The template html as a string, or a promise\r\n   * for that string.\r\n   */\r\n  fromUrl(url: string | Function, params: any) {\r\n    if (isFunction(url)) url = (<any>url)(params);\r\n    if (url == null) return null;\r\n\r\n    if (this._useHttp) {\r\n      return this.$http\r\n        .get(url, { cache: this.$templateCache, headers: { Accept: 'text/html' } })\r\n        .then(function (response) {\r\n          return response.data;\r\n        });\r\n    }\r\n\r\n    return this.$templateRequest(url);\r\n  }\r\n\r\n  /**\r\n   * Creates a template by invoking an injectable provider function.\r\n   *\r\n   * @param provider Function to invoke via `locals`\r\n   * @param {Function} injectFn a function used to invoke the template provider\r\n   * @return {string|Promise.<string>} The template html as a string, or a promise\r\n   * for that string.\r\n   */\r\n  fromProvider(provider: IInjectable, params: any, context: ResolveContext) {\r\n    const deps = services.$injector.annotate(provider);\r\n    const providerFn = isArray(provider) ? tail(<any[]>provider) : provider;\r\n    const resolvable = new Resolvable('', <Function>providerFn, deps);\r\n    return resolvable.get(context);\r\n  }\r\n\r\n  /**\r\n   * Creates a component's template by invoking an injectable provider function.\r\n   *\r\n   * @param provider Function to invoke via `locals`\r\n   * @param {Function} injectFn a function used to invoke the template provider\r\n   * @return {string} The template html as a string: \"<component-name input1='::$resolve.foo'></component-name>\".\r\n   */\r\n  fromComponentProvider(provider: IInjectable, params: any, context: ResolveContext) {\r\n    const deps = services.$injector.annotate(provider);\r\n    const providerFn = isArray(provider) ? tail(<any[]>provider) : provider;\r\n    const resolvable = new Resolvable('', <Function>providerFn, deps);\r\n    return resolvable.get(context);\r\n  }\r\n\r\n  /**\r\n   * Creates a template from a component's name\r\n   *\r\n   * This implements route-to-component.\r\n   * It works by retrieving the component (directive) metadata from the injector.\r\n   * It analyses the component's bindings, then constructs a template that instantiates the component.\r\n   * The template wires input and output bindings to resolves or from the parent component.\r\n   *\r\n   * @param uiView {object} The parent ui-view (for binding outputs to callbacks)\r\n   * @param context The ResolveContext (for binding outputs to callbacks returned from resolves)\r\n   * @param component {string} Component's name in camel case.\r\n   * @param bindings An object defining the component's bindings: {foo: '<'}\r\n   * @return {string} The template as a string: \"<component-name input1='::$resolve.foo'></component-name>\".\r\n   */\r\n  makeComponentTemplate(uiView: IAugmentedJQuery, context: ResolveContext, component: string, bindings?: any) {\r\n    bindings = bindings || {};\r\n\r\n    // Bind once prefix\r\n    const prefix = angular.version.minor >= 3 ? '::' : '';\r\n    // Convert to kebob name. Add x- prefix if the string starts with `x-` or `data-`\r\n    const kebob = (camelCase: string) => {\r\n      const kebobed = kebobString(camelCase);\r\n      return /^(x|data)-/.exec(kebobed) ? `x-${kebobed}` : kebobed;\r\n    };\r\n\r\n    const attributeTpl = (input: BindingTuple) => {\r\n      const { name, type } = input;\r\n      const attrName = kebob(name);\r\n      // If the ui-view has an attribute which matches a binding on the routed component\r\n      // then pass that attribute through to the routed component template.\r\n      // Prefer ui-view wired mappings to resolve data, unless the resolve was explicitly bound using `bindings:`\r\n      if (uiView.attr(attrName) && !bindings[name]) return `${attrName}='${uiView.attr(attrName)}'`;\r\n\r\n      const resolveName = bindings[name] || name;\r\n      // Pre-evaluate the expression for \"@\" bindings by enclosing in {{ }}\r\n      // some-attr=\"{{ ::$resolve.someResolveName }}\"\r\n      if (type === '@') return `${attrName}='{{${prefix}$resolve.${resolveName}}}'`;\r\n\r\n      // Wire \"&\" callbacks to resolves that return a callback function\r\n      // Get the result of the resolve (should be a function) and annotate it to get its arguments.\r\n      // some-attr=\"$resolve.someResolveResultName(foo, bar)\"\r\n      if (type === '&') {\r\n        const res = context.getResolvable(resolveName);\r\n        const fn = res && res.data;\r\n        const args = (fn && services.$injector.annotate(fn)) || [];\r\n        // account for array style injection, i.e., ['foo', function(foo) {}]\r\n        const arrayIdxStr = isArray(fn) ? `[${fn.length - 1}]` : '';\r\n        return `${attrName}='$resolve.${resolveName}${arrayIdxStr}(${args.join(',')})'`;\r\n      }\r\n\r\n      // some-attr=\"::$resolve.someResolveName\"\r\n      return `${attrName}='${prefix}$resolve.${resolveName}'`;\r\n    };\r\n\r\n    const attrs = getComponentBindings(component).map(attributeTpl).join(' ');\r\n    const kebobName = kebob(component);\r\n    return `<${kebobName} ${attrs}></${kebobName}>`;\r\n  }\r\n}\r\n\r\n// Gets all the directive(s)' inputs ('@', '=', and '<') and outputs ('&')\r\nfunction getComponentBindings(name: string) {\r\n  const cmpDefs = <any[]>services.$injector.get(name + 'Directive'); // could be multiple\r\n  if (!cmpDefs || !cmpDefs.length) throw new Error(`Unable to find component named '${name}'`);\r\n  return cmpDefs.map(getBindings).reduce(unnestR, []);\r\n}\r\n\r\n// Given a directive definition, find its object input attributes\r\n// Use different properties, depending on the type of directive (component, bindToController, normal)\r\nconst getBindings = (def: any) => {\r\n  if (isObject(def.bindToController)) return scopeBindings(def.bindToController);\r\n  return scopeBindings(def.scope);\r\n};\r\n\r\ninterface BindingTuple {\r\n  name: string;\r\n  type: string;\r\n}\r\n\r\n// for ng 1.2 style, process the scope: { input: \"=foo\" }\r\n// for ng 1.3 through ng 1.5, process the component's bindToController: { input: \"=foo\" } object\r\nconst scopeBindings = (bindingsObj: Obj) =>\r\n  Object.keys(bindingsObj || {})\r\n    // [ 'input', [ '=foo', '=', 'foo' ] ]\r\n    .map((key) => [key, /^([=<@&])[?]?(.*)/.exec(bindingsObj[key])])\r\n    // skip malformed values\r\n    .filter((tuple) => isDefined(tuple) && isArray(tuple[1]))\r\n    // { name: ('foo' || 'input'), type: '=' }\r\n    .map((tuple) => ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] } as BindingTuple));\r\n"
  ]
}